{"version":3,"sources":["../src/HTMLElement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;wBAAoB,WAAW;;;;8CACC,mCAAmC;;;;oCAC7C,yBAAyB;;;;oCACnB,yBAAyB;;;;wCACf,6BAA6B;;AAEnE,IAAM,YAAY,GAAG,6EAA6E,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;;;;;;;IAOzF,WAAW;cAAX,WAAW;;AACjB,aADM,WAAW,GACd;8BADG,WAAW;;AAExB,mCAFa,WAAW,6CAEhB;;;;;;AAMR,YAAI,CAAC,KAAK,GAAG,gDAAwB,IAAI,CAAC,CAAC;;;;;;AAM3C,YAAI,CAAC,SAAS,GAAG,sCAAc,IAAI,CAAC,CAAC;;AAErC,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACtB;;;;;;;;;;;iBAjBgB,WAAW;;;;;;gCAmCX,2BAAC,aAAa,EAAE,KAAK,EAAE;AACpC,gBAAI,aAAa,KAAK,OAAO,EAAE;AAC3B,oBAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,IAAI,EAAE,CAAC;aACpC;;AAED,gBAAI,aAAa,KAAK,OAAO,EAAE;AAC3B,oBAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;aACtC;;AAED,gBAAI,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AACnC,oBAAI,CAAC,OAAO,CAAC,uDAAwB,aAAa,CAAC,CAAC,GAAG,KAAK,CAAC;aAChE;SACJ;;;;;;;;;;;aAvBY,eAAG;AACZ,mBAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACrC;;;;;;;;aAKY,aAAC,SAAS,EAAE;AACrB,gBAAI,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACzC;;;aAoBY,eAAG;AACZ,gBAAI,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;;AAEjC,iCAAiB,IAAI,CAAC,WAAW,6GAAE;;;;;;;;;;;;oBAA1B,IAAI;;AACT,sBAAM,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;;AAE1B,oBAAI,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,WAAW,EAAE;AACnD,0BAAM,IAAI,IAAI,GAAG,uCAAgB,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;iBACtD;aACJ;;AAED,kBAAM,IAAI,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAA,AAAC,CAAC;AAChH,mBAAO,MAAM,CAAC;SACjB;;;;;iCAEU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;WAtEgB,WAAW;;;qBAAX,WAAW","file":"HTMLElement.js","sourcesContent":["import Element from './Element';\nimport CSSStyleDeclaration from './HTMLElement/CSSStyleDeclaration';\nimport ClassList from './HTMLElement/ClassList';\nimport escapeAttribute from './utils/escapeAttribute';\nimport {attributeNameToProperty} from './utils/escapeAttributeName';\n\nconst voidElements = 'area base br col embed hr img input keygen link meta param source track wbr'.split(' ');\n\n/**\n * The HTMLElement interface represents any HTML element.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement\n */\nexport default class HTMLElement extends Element {\n    constructor() {\n        super();\n        /**\n         * returns a token list of the class attribute of the element\n         * @type {CSSStyleDeclaration} style\n         * @readonly\n         */\n        this.style = new CSSStyleDeclaration(this);\n        /**\n         * returns a token list of the class attribute of the element\n         * @type {ClassList} classList\n         * @readonly\n         */\n        this.classList = new ClassList(this);\n\n        this._dataset = {};\n    }\n\n    /**\n     * The class of the element.\n     *\n     * @type {string}\n     */\n    get className() {\n        return this.getAttribute('class');\n    }\n\n    /**\n     * @param {string} className\n     */\n    set className(className) {\n        this.setAttribute('class', className);\n    }\n\n    _updatedAttribute(attributeName, value) {\n        if (attributeName === 'style') {\n            this.style.cssText = value || '';\n        }\n\n        if (attributeName === 'class') {\n            this.classList._parse(value || '');\n        }\n\n        if (attributeName.startsWith('data-')) {\n            this.dataset[attributeNameToProperty(attributeName)] = value;\n        }\n    }\n\n    /**\n     * @ignore\n     * @return {string}\n     */\n    get outerHTML() {\n        let result = '<' + this.nodeName;\n\n        for (let attr of this._attributes) {\n            result += ' ' + attr.name;\n\n            if (attr.value !== null && attr.value !== 'undefined') {\n                result += '=\"' + escapeAttribute(attr.value) + '\"';\n            }\n        }\n\n        result += '>' + (voidElements.indexOf(this.nodeName) !== -1 ? '' : this.innerHTML + '</' + this.nodeName + '>');\n        return result;\n    }\n\n    get dataset() {\n        return this._dataset;\n    }\n}\n"]}