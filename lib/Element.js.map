{"version":3,"sources":["../src/Element.js"],"names":[],"mappings":"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","file":"Element.js","sourcesContent":["import Node from './Node';\nimport ParentNode from './ParentNode';\nimport { querySelector as _querySelector, querySelectorAll as _querySelectorAll } from './utils/querySelectorHelper';\n\n/**\n * The Element interface represents an object within a DOM document.\n * This interface describes methods and properties common to all kinds of elements.\n * Specific behaviors are described in interfaces which inherit from Element but add additional functionality.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/Element\n */\n/**\n * The Element.innerHTML property sets or gets the HTML syntax describing the element's descendants.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\n * @member {string} Element#innerHTML\n */\n/**\n * The outerHTML attribute of the element DOM interface gets the serialized HTML fragment\n * describing the element including its descendants.\n * It can be set to replace the element with nodes parsed from the given string.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML\n * @member {string} Element#outerHTML\n */\n\nexport default class Element extends ParentNode {\n    /**\n     * The id of the element.\n     *\n     * @type {string}\n     */\n    get id() {\n        return this.getAttribute('id');\n    }\n\n    /**\n     * @param {string} id\n     */\n    set id(id) {\n        this.setAttribute('id', id);\n    }\n\n    /**\n     * The tag name of the element.\n     *\n     * @type {string}\n     * @readonly\n     */\n    get tagName() {\n        return this.nodeName;\n    }\n\n    /**\n     * Returns a live {@link HTMLCollection} containing all objects of type {@link Element}\n     * that are children of this ParentNode.\n     *\n     * Note: this currently returns a non-live array.\n     *\n     * later type {HTMLCollection}\n     *\n     * @type {Element[]}\n     * @readonly\n     */\n    get children() {\n        return this._childNodes.filter(node => node instanceof Element);\n    }\n\n    /**\n     * Returns the {@link Element} that is the first child of this ParentNode, or null if there is none.\n     *\n     * @type {Element}\n     * @readonly\n     */\n    get firstElementChild() {\n        return this._childNodes[0] || null;\n    }\n\n    /**\n     * Returns the {@link Element} that is the first child of this ParentNode, or null if there is none.\n     *\n     * @type {Element}\n     * @readonly\n     */\n    get lastElementChild() {\n        return this._childNodes.length === 0 ? null : this._childNodes[this._childNodes.length - 1];\n    }\n\n    /**\n     * Returns the {@link Element} immediately following the specified one in its parent's children list,\n     * or null if the specified element is the last one in the list.\n     *\n     * @type {Element}\n     * @readonly\n     */\n    get nextElementSibling() {\n        const siblings = this.parentNode.children;\n        if (siblings && siblings.length > 1) {\n            let index = siblings.indexOf(this);\n            if (index + 1 < siblings.length) {\n                return siblings[index + 1];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the Element immediately prior to the specified one in its parent's children list, or null\n     * if the specified element is the first one in the list.\n     *\n     * @type {Element}\n     * @readonly\n     */\n    get previousElementSibling() {\n        const siblings = this.parentNode.children;\n        if (siblings && siblings.length > 1) {\n            let index = siblings.indexOf(this);\n            if (index !== 0) {\n                return siblings[index - 1];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns an unsigned long giving the amount of children that the object has.\n     *\n     * @type {number}\n     * @readonly\n     */\n    get childElementCount() {\n        return this._childNodes.length;\n    }\n\n    /**\n     * Returns a reference to the element by its ID.\n     *\n     * @param {string} id case-sensitive string representing the unique ID of the element being sought\n     * @return {Element} reference to an Element, or null if an element with the specified ID is not in the document.\n     */\n    getElementById(id) {\n        return this._childNodesRecursiveFind(node => node instanceof Element && node.getAttribute('id') === id) || null;\n    }\n\n    /**\n     * Returns an HTMLCollection of elements with the given tag name.\n     * The complete document is searched, including the root node.\n     * The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync\n     * with the DOM treewithout having to call document.getElementsByTagName() again.\n     *\n     * @param {string} tagName\n     * @return {HTMLCollection}\n     */\n    getElementsByTagName(tagName) {\n        if (!tagName) {\n            return this._createCollection(child => true);\n        }\n\n        tagName = tagName.toLowerCase();\n        return this._createCollection(child => child.nodeName.toLowerCase() === tagName);\n    }\n\n    /**\n     * The Element.getElementsByClassName() method returns a live HTMLCollection containing all child\n     * elements which have all of the given class names. When called on the document object,\n     * the complete document is searched, including the root node.\n     *\n     * @param {string} names is a string representing the list of class names to match;\n     *                class names are separated by whitespace\n     * @return {HTMLCollection}\n     */\n    getElementsByClassName(names) {\n        const classes = names.split(' ');\n        return this._createCollection(child => classes.every(token => child.classList.contains(token)));\n    }\n\n    /**\n     * Returns the first element that is a descendant of the element on which it is invoked that matches the\n     * specified group of selectors.\n     *\n     * @param {string} query CSS query for selecting element\n     * @return {Element|null}\n     */\n    querySelector(query) {\n        return _querySelector(this, query);\n    }\n\n    /**\n     * Returns a non-live NodeList of all elements descended from the element on which it is invoked that match the\n     * specified group of CSS selectors.\n     *\n     * @param {string} query\n     * @return {Element[]}\n     */\n    querySelectorAll(query) {\n        return _querySelectorAll(this, query);\n    }\n\n    get attributes() {\n        return this._attributes;\n    }\n}\n\n/**\n * @constant {string} Comment#nodeType\n */\nObject.defineProperty(Element.prototype, 'nodeType', { value: Node.ELEMENT_NODE });\n"]}