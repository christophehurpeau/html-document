{"version":3,"sources":["../src/MouseEvent.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;wBAAoB,WAAW;;;;sBACZ,QAAQ;;;;;;;;;;;;;;IASN,UAAU;cAAV,UAAU;;AAChB,aADM,UAAU,CACf,IAAI,EAAE,cAAc,EAAE;8BADjB,UAAU;;AAEvB,sBAAc,GAAG,yBAAO,IAAI,EAAE;AAC1B,mBAAO,EAAE,CAAC;AACV,mBAAO,EAAE,CAAC;AACV,mBAAO,EAAE,CAAC;AACV,mBAAO,EAAE,CAAC;AACV,mBAAO,EAAE,KAAK;AACd,oBAAQ,EAAE,KAAK;AACf,kBAAM,EAAE,KAAK;AACb,mBAAO,EAAE,KAAK;AACd,kBAAM,EAAE,CAAC;AACT,mBAAO,EAAE,CAAC;AACV,yBAAa,EAAE,IAAI;AACnB,kBAAM,EAAE,IAAI;SACf,EAAE,cAAc,CAAC,CAAC;AACnB,mCAhBa,UAAU,6CAgBjB,IAAI,EAAE,cAAc,EAAE;;AAE5B,YAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC;AACvC,YAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC;AACvC,YAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC;AACvC,YAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC;AACvC,YAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC;AACvC,YAAI,CAAC,SAAS,GAAG,cAAc,CAAC,QAAQ,CAAC;AACzC,YAAI,CAAC,OAAO,GAAG,cAAc,CAAC,MAAM,CAAC;AACrC,YAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC;AACvC,YAAI,CAAC,OAAO,GAAG,cAAc,CAAC,MAAM,CAAC;AACrC,YAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC;AACvC,YAAI,CAAC,cAAc,GAAG,cAAc,CAAC,aAAa,CAAC;AACnD,YAAI,CAAC,OAAO,GAAG,cAAc,CAAC,MAAM,CAAC;KACxC;;;;;;;;;;;;iBA9BgB,UAAU;;aAsCjB,eAAG;AACT,mBAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;;;;;;;;;aAQS,eAAG;AACT,mBAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;;;;;;;;;aAQU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;;;;;;;;;;;aAQU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;;;;;;;;;;;aAQU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;;;;;;;;;;;aAQU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;;;;;;;;;;;aAQU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;;;;;;;;;;;aAQS,eAAG;AACT,mBAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;;;;;;;;;aAQgB,eAAG;AAChB,mBAAO,IAAI,CAAC,cAAc,CAAC;SAC9B;;;;;;;;;;;;;aAQU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;;;;;;;;;;;aAQU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;;;;;;;;;;;aAQW,eAAG;AACX,mBAAO,IAAI,CAAC,SAAS,CAAC;SACzB;;;WAtJgB,UAAU;;;qBAAV,UAAU","file":"MouseEvent.js","sourcesContent":["import UIEvent from './UIEvent';\nimport extend from 'extend';\n\n/**\n * The MouseEvent interface represents events that occur due to the user interacting with a pointing device\n * (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n */\n\nexport default class MouseEvent extends UIEvent {\n    constructor(type, mouseEventInit) {\n        mouseEventInit = extend(true, {\n            screenX: 0,\n            screenY: 0,\n            clientX: 0,\n            clientY: 0,\n            ctrlKey: false,\n            shiftKey: false,\n            altKey: false,\n            metaKey: false,\n            button: 0,\n            buttons: 0,\n            relatedTarget: null,\n            region: null,\n        }, mouseEventInit);\n        super(type, mouseEventInit);\n\n        this._screenX = mouseEventInit.screenX;\n        this._screenY = mouseEventInit.screenY;\n        this._clientX = mouseEventInit.clientX;\n        this._clientY = mouseEventInit.clientY;\n        this._ctrlKey = mouseEventInit.ctrlKey;\n        this._shiftKey = mouseEventInit.shiftKey;\n        this._altKey = mouseEventInit.altKey;\n        this._metaKey = mouseEventInit.metaKey;\n        this._button = mouseEventInit.button;\n        this._buttons = mouseEventInit.buttons;\n        this._relatedTarget = mouseEventInit.relatedTarget;\n        this._region = mouseEventInit.region;\n    }\n\n    /**\n     * Returns true if the alt key was down when the mouse event was fired.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    get altKey() {\n        return this._altKey;\n    }\n\n    /**\n     * The button number that was pressed when the mouse event was fired.\n     *\n     * @type {number}\n     * @readonly\n     */\n    get button() {\n        return this._button;\n    }\n\n    /**\n     * The buttons being pressed when the mouse event was fired\n     *\n     * @type {number}\n     * @readonly\n     */\n    get buttons() {\n        return this._buttons;\n    }\n\n    /**\n     * The X coordinate of the mouse pointer in local (DOM content) coordinates.\n     *\n     * @type {number}\n     * @readonly\n     */\n    get clientX() {\n        return this._clientX;\n    }\n\n    /**\n     * The Y coordinate of the mouse pointer in local (DOM content) coordinates.\n     *\n     * @type {number}\n     * @readonly\n     */\n    get clientY() {\n        return this._clientY;\n    }\n\n    /**\n     * Returns true if the ctrl key was down when the mouse event was fired.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    get ctrlKey() {\n        return this._ctrlKey;\n    }\n\n    /**\n     * Returns true if the meta key was down when the mouse event was fired.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    get metaKey() {\n        return this._metaKey;\n    }\n\n    /**\n     * Returns the id of the hit region affected by the event. If no hit region is affected, null is returned.\n     *\n     * @type {null|*}\n     * @readonly\n     */\n    get region() {\n        return this._region;\n    }\n\n    /**\n     * The secondary target for the event, if there is one.\n     *\n     * @type {null|*}\n     * @readonly\n     */\n    get relatedTarget() {\n        return this._relatedTarget;\n    }\n\n    /**\n     * The X coordinate of the mouse pointer in global (screen) coordinates.\n     *\n     * @type {number}\n     * @readonly\n     */\n    get screenX() {\n        return this._screenX;\n    }\n\n    /**\n     * The Y coordinate of the mouse pointer in global (screen) coordinates.\n     *\n     * @type {number}\n     * @readonly\n     */\n    get screenY() {\n        return this._screenY;\n    }\n\n    /**\n     * Returns true if the shift key was down when the mouse event was fired.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    get shiftKey() {\n        return this._shiftKey;\n    }\n}\n"]}