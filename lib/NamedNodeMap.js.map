{"version":3,"sources":["../src/NamedNodeMap.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;oBAAiB,QAAQ;;;;4BACA,gBAAgB;;;;;;;;;;;;IASpB,YAAY;AAClB,aADM,YAAY,GACf;8BADG,YAAY;;AAEzB,YAAI,CAAC,KAAK,GAAG,UAAS,CAAC;AACvB,YAAI,CAAC,MAAM,GAAG,EAAE,CAAC;KACpB;;;;;;;;;;;iBAJgB,YAAY;;;;;;;;;;;;;eAqBjB,sBAAC,IAAI,EAAE;AACf,gBAAI,EAAE,IAAI,8BAAgB,AAAC,EAAE;AACzB,sBAAM,8BAAiB,UAAU,CAAC,CAAC;aACtC;;AAED,gBAAI,MAAM,GAAG,IAAI,CAAC;;AAElB,gBAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAC3B,sBAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnC,oBAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;aACzD;;AAED,gBAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChC,gBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAE5B,mBAAO,MAAM,CAAC;SACjB;;;;;;;;;;;;;;eAQW,sBAAC,IAAI,EAAE;AACf,gBAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AACtB,uBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aAC/B;;AAED,mBAAO,IAAI,CAAC;SACf;;;;;;;;;;;;;;eAQc,yBAAC,IAAI,EAAE;AAClB,gBAAI,MAAM,GAAG,IAAI,CAAC;AAClB,gBAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AACtB,sBAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC9B,oBAAI,CAAC,KAAK,UAAO,CAAC,IAAI,CAAC,CAAC;AACxB,oBAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;aACpD;;AAED,mBAAO,MAAM,CAAC;SACjB;;;;;;;;;;;;;;eAQG,cAAC,KAAK,EAAE;AACR,gBAAI,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AAC1C,uBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aAC7C;;AAED,mBAAO,IAAI,CAAC;SACf;;;;6BAEgB,iBAAG;;;AAChB,gBAAI,KAAK,GAAG,CAAC,CAAC;;AAEd,mBAAO;AACH,oBAAI,EAAE;2BAAO,EAAE,KAAK,EAAE,MAAK,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,GAAG,MAAK,MAAM,EAAE;iBAAC;aACzE,CAAC;SACL;;;aA/ES,eAAG;AACT,mBAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;SAC1B;;;WAbgB,YAAY;;;qBAAZ,YAAY","file":"NamedNodeMap.js","sourcesContent":["import Attr from './Attr';\nimport DOMException from './DOMException';\n\n/**\n * The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any\n * particular order, unlike NodeList, although they may be accessed by an index as in an array.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap\n */\n\nexport default class NamedNodeMap {\n    constructor() {\n        this._data = new Map();\n        this._index = [];\n    }\n\n    /**\n     * Returns the amount of objects in the map.\n     *\n     * @returns {number}\n     */\n    get length() {\n        return this._data.size;\n    }\n\n    /**\n     * Replaces, or adds, the Attr identified in the map by the given name.\n     *\n     * @param {Attr} attr\n     * @returns {Attr|null}\n     */\n    setNamedItem(attr) {\n        if (!(attr instanceof Attr)) {\n            throw new DOMException('NOT_ATTR');\n        }\n\n        let result = null;\n\n        if (this._data.has(attr.name)) {\n            result = this._data.get(attr.name);\n            this._index.splice(this._index.indexOf(attr.name), 1);\n        }\n\n        this._data.set(attr.name, attr);\n        this._index.push(attr.name);\n\n        return result;\n    }\n\n    /**\n     * Returns a Attr, corresponding to the given name.\n     *\n     * @param {string} name\n     * @returns {Attr|null}\n     */\n    getNamedItem(name) {\n        if (this._data.has(name)) {\n            return this._data.get(name);\n        }\n\n        return null;\n    }\n\n    /**\n     * Removes the Attr identified by the given map.\n     *\n     * @param {string} name\n     * @returns {Attr|null}\n     */\n    removeNamedItem(name) {\n        let result = null;\n        if (this._data.has(name)) {\n            result = this._data.get(name);\n            this._data.delete(name);\n            this._index.splice(this._index.indexOf(name), 1);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the Attr at the given index, or null if the index is higher or equal to the number of nodes.\n     *\n     * @param {number} index\n     * @returns {Attr|null}\n     */\n    item(index) {\n        if (index > -1 && index < this._index.length) {\n            return this._data.get(this._index[index]);\n        }\n\n        return null;\n    }\n\n    [Symbol.iterator]() {\n        let index = 0;\n\n        return {\n            next: () => ({ value: this.item(index++), done: index > this.length }),\n        };\n    }\n}\n"]}