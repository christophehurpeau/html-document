{"version":3,"sources":["../../src/utils/cloneNodeHelper.js"],"names":[],"mappings":";;;;;;;;oBAAiB,SAAS;;;;oBACT,SAAS;;;;4BACD,iBAAiB;;;;;;;;AAE1C,SAAS,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE;AACrC,QAAI,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClE,SAAK,CAAC,cAAc,GAAG,IAAI,CAAC;AAC5B,SAAK,CAAC,WAAW,GAAG,IAAI,CAAC;AACzB,QAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACpC,SAAK,IAAI,GAAG,IAAI,UAAU,EAAE;AACxB,YAAI,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAChC,iBAAK,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;SACtD;KACJ;;AAED,QAAI,IAAI,EAAE;AACN,eAAO,CAAC,UAAU,CAAC,KAAK,CAAC,UAAC,KAAK,EAAK;AAChC,iBAAK,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1C,mBAAO,IAAI,CAAC;SACf,CAAC,CAAC;KACN;;AAED,WAAO,KAAK,CAAC;CAChB;;;mBAED,SAAS,aAAa,CAAC,OAAO,EAAE;AAC5B,WAAO,sBAAS,OAAO,CAAC,KAAK,CAAC,CAAC;CAClC;;;;;;;;;;;;AASD,SAAS,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE;AAC9B,YAAQ,OAAO,CAAC,QAAQ;AACpB,aAAK,kBAAK,YAAY;AAClB,mBAAO,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAAA,AAC3C,aAAK,kBAAK,SAAS;AACf,mBAAO,aAAa,CAAC,OAAO,CAAC,CAAC;AAAA,AAClC;AACI,kBAAM,8BAAiB,0BAAa,cAAc,CAAC,CAAC;AAAA,KAC3D;CACJ;;qBAEc,SAAS","file":"cloneNodeHelper.js","sourcesContent":["import Node from '../Node';\nimport Text from '../Text';\nimport DOMException from '../DOMException';\n\nfunction cloneElementNode(element, deep) {\n    let clone = element.ownerDocument.createElement(element.nodeName);\n    clone._ownerDocument = null;\n    clone._parentNode = null;\n    let attributes = element.attributes;\n    for (let key in attributes) {\n        if (attributes.hasOwnProperty(key)) {\n            clone.setAttribute(key, element.getAttribute(key));\n        }\n    }\n\n    if (deep) {\n        element.childNodes.every((child) => {\n            clone.appendChild(cloneNode(child, deep));\n            return true;\n        });\n    }\n\n    return clone;\n}\n\nfunction cloneTextNode(element) {\n    return new Text(element.value);\n}\n\n/**\n * Function return copy of element and if request deep copy of element\n *\n * @param {Node} element\n * @param {boolean} deep\n * @ignore\n */\nfunction cloneNode(element, deep) {\n    switch (element.nodeType) {\n        case Node.ELEMENT_NODE:\n            return cloneElementNode(element, deep);\n        case Node.TEXT_NODE:\n            return cloneTextNode(element);\n        default:\n            throw new DOMException(DOMException.DATA_CLONE_ERR);\n    }\n}\n\nexport default cloneNode;\n"]}