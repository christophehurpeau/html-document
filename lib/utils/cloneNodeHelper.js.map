{"version":3,"sources":["../../src/utils/cloneNodeHelper.js"],"names":[],"mappings":";;;;;;;;;;oBAAiB,SAAS;;;;oBACT,SAAS;;;;4BACD,iBAAiB;;;;;;;;AAE1C,SAAS,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE;AAClC,yBAAmB,MAAM,CAAC,UAAU,6GAAE;;;;;;;;;;;;YAA3B,IAAI;;AACX,YAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KAC5C;CACJ;;;;gBAED,SAAS,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE;AACrC,QAAM,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACpE,SAAK,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;AAC9C,SAAK,CAAC,WAAW,GAAG,IAAI,CAAC;AACzB,kBAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;;AAE/B,QAAI,IAAI,EAAE;AACN,eAAO,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,KAAK;mBAAI,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAAA,CAAC,CAAC;KACrF;;AAED,WAAO,KAAK,CAAC;CAChB;;;;gBAED,SAAS,qBAAqB,CAAC,QAAQ,EAAE,IAAI,EAAE;AAC3C,QAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC;;AAE9D,QAAI,IAAI,EAAE;AACN,gBAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,KAAK;mBAAI,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAAA,CAAC,CAAC;KACtF;;AAED,WAAO,KAAK,CAAC;CAChB;;;mBAED,SAAS,aAAa,CAAC,OAAO,EAAE;AAC5B,WAAO,sBAAS,OAAO,CAAC,KAAK,CAAC,CAAC;CAClC;;;;;;;;;;;;AASD,SAAS,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE;AACjC,YAAQ,OAAO,CAAC,QAAQ;AACpB,aAAK,kBAAK,sBAAsB;AAC5B,mBAAO,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAAA,AAChD,aAAK,kBAAK,YAAY;AAClB,mBAAO,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAAA,AAC3C,aAAK,kBAAK,SAAS;AACf,mBAAO,aAAa,CAAC,OAAO,CAAC,CAAC;AAAA,AAClC;AACI,kBAAM,8BAAiB,0BAAa,cAAc,CAAC,CAAC;AAAA,KAC3D;CACJ;;QAGG,YAAY,GAAZ,YAAY;QACZ,gBAAgB,GAAhB,gBAAgB;QAChB,aAAa,GAAb,aAAa","file":"cloneNodeHelper.js","sourcesContent":["import Node from '../Node';\nimport Text from '../Text';\nimport DOMException from '../DOMException';\n\nfunction cloneArguments(source, dest) {\n    for (const attr of source.attributes) {\n        dest.setAttribute(attr.name, attr.value);\n    }\n}\n\nfunction cloneElementNode(element, deep) {\n    const clone = element.ownerDocument.createElement(element.nodeName);\n    clone._ownerDocument = element._ownerDocument;\n    clone._parentNode = null;\n    cloneArguments(element, clone);\n\n    if (deep) {\n        element.childNodes.forEach(child => clone.appendChild(cloneAnyNode(child, deep)));\n    }\n\n    return clone;\n}\n\nfunction cloneDocumentFragment(fragment, deep) {\n    const clone = fragment.ownerDocument.createDocumentFragment();\n\n    if (deep) {\n        fragment.childNodes.forEach(child => clone.appendChild(cloneAnyNode(child, deep)));\n    }\n\n    return clone;\n}\n\nfunction cloneTextNode(element) {\n    return new Text(element.value);\n}\n\n/**\n * Function return copy of element and if request deep copy of element\n *\n * @param {ParentNode|Node} element\n * @param {boolean} deep\n * @ignore\n */\nfunction cloneAnyNode(element, deep) {\n    switch (element.nodeType) {\n        case Node.DOCUMENT_FRAGMENT_NODE:\n            return cloneDocumentFragment(element, deep);\n        case Node.ELEMENT_NODE:\n            return cloneElementNode(element, deep);\n        case Node.TEXT_NODE:\n            return cloneTextNode(element);\n        default:\n            throw new DOMException(DOMException.DATA_CLONE_ERR);\n    }\n}\n\nexport {\n    cloneAnyNode,\n    cloneElementNode,\n    cloneTextNode,\n};\n"]}