{"version":3,"sources":["../../src/utils/Url.js"],"names":[],"mappings":"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","file":"Url.js","sourcesContent":["import { parse as urlParse, format as urlFormat } from 'url';\n\n/**\n * Helper class providing URLUtils object implementation. Used in document.location, HTMLAnchorElement etc.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/URLUtils\n */\nexport default class Url {\n    /**\n     * Creates object using given value as start url.\n     *\n     * @param {string} url - url to parse.\n     */\n    constructor(url) {\n        url = url || 'about:blank';\n        this._data = urlParse(url);\n    }\n\n    /**\n     * @returns {string} - string representation of Url (Full URI)\n     */\n    toString() {\n        return urlFormat(this._data);\n    }\n\n    /**\n     * Is a DOMString containing the whole URL.\n     *\n     * @type {string}\n     */\n    get href() {\n        return this.toString();\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set href(value) {\n        value = value || 'about:blank';\n        this._data = urlParse(value);\n    }\n\n    /**\n     * Is a DOMString containing the protocol scheme of the URL, including the final ':'.\n     *\n     * @type {string}\n     */\n    get protocol() {\n        if (this._data.protocol === null) {\n            return '';\n        }\n\n        return this._data.protocol;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set protocol(value) {\n        if (!value.endsWith(':')) {\n            value += ':';\n        }\n\n        this._data.protocol = value;\n    }\n\n    /**\n     * Is a DOMString containing the host, that is the hostname, and then, if the port of the URL is not empty\n     * (which can happen because it was not specified or because it was specified to be the default port of the\n     * URL's scheme), a ':', and the port of the URL.\n     *\n     * @type {string}\n     */\n    get host() {\n        if (this._data.host === null) {\n            return '';\n        }\n\n        return this._data.host;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set host(value) {\n        let tmpUrl = urlParse('//' + value, false, true);\n        this._data.host = tmpUrl.host;\n        this._data.hostname = tmpUrl.hostname;\n        this._data.port = tmpUrl.port;\n    }\n\n    /**\n     * The authentication information portion of a URL.\n     *\n     * @type {string}\n     */\n    get auth() {\n        if (this._data.auth === null || this._data.auth === undefined) {\n            return '';\n        }\n\n        return this._data.auth;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set auth(value) {\n        this._data.auth = value;\n    }\n\n    /**\n     * Is a DOMString containing the domain of the URL.\n     *\n     * @type {string}\n     */\n    get hostname() {\n        if (this._data.hostname === null) {\n            return '';\n        }\n\n        return this._data.hostname;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set hostname(value) {\n        this._data.hostname = value;\n        delete this._data.host;\n        this.href = urlFormat(this._data);\n    }\n\n    /**\n     * Is a DOMString containing the port number of the URL.\n     *\n     * @returns {string}\n     */\n    get port() {\n        if (this._data.port === null || this._data.port === undefined) {\n            switch (this._data.protocol) {\n                case 'http:':\n                    return '80';\n                case 'https:':\n                    return '443';\n                case 'ftp:':\n                    return '21';\n            }\n            return '';\n        }\n\n        return this._data.port;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set port(value) {\n        value = parseInt(value, 10);\n        if (isNaN(value)) {\n            value = '';\n        }\n\n        this._data.port = value;\n        delete this._data.host;\n        this.href = urlFormat(this._data);\n    }\n\n    /**\n     * Is a DOMString containing an initial '/' followed by the path of the URL.\n     *\n     * @returns {string}\n     */\n    get pathname() {\n        return this._data.pathname;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set pathname(value) {\n        this._data.pathname = value;\n    }\n\n    /**\n     * Is a DOMString containing a '?' followed by the parameters of the URL.\n     *\n     * @returns {string}\n     */\n    get search() {\n        if (this._data.search === null) {\n            return '';\n        }\n\n        return this._data.search;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set search(value) {\n        this._data.search = value;\n    }\n\n    /**\n     * Is a DOMString containing a '#' followed by the fragment identifier of the URL.\n     *\n     * @type {string}\n     */\n    get hash() {\n        if (this._data.hash === null) {\n            return '#';\n        }\n\n        return this._data.hash;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set hash(value) {\n        if (!value.startsWith('#')) {\n            value = '#' + value;\n        }\n\n        this._data.hash = value;\n    }\n\n    /**\n     * Is a DOMString containing the username specified before the domain name.\n     *\n     * @type {string}\n     */\n    get username() {\n        if (this.auth !== '') {\n            if (this.auth.indexOf(':') !== -1) {\n                return this.auth.split(':')[0];\n            } else {\n                return this.auth;\n            }\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set username(value) {\n        if (this.auth !== '') {\n            let password = this.auth.split(':')[1];\n            this.auth = value + ':' + password;\n        } else {\n            this.auth = value;\n        }\n    }\n\n    /**\n     * Is a DOMString containing the password specified before the domain name.\n     *\n     * @type {string}\n     */\n    get password() {\n        if (this.auth !== '' && this.auth.indexOf(':') !== -1) {\n            return this.auth.split(':')[1];\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set password(value) {\n        if (this.auth !== '') {\n            let name = this.auth.split(':')[0];\n            this.auth = name + ':' + value;\n        } else {\n            this.auth = ':' + value;\n        }\n    }\n\n    /**\n     * Return 'params' part of href as object.\n     *\n     * @type {Object}\n     */\n    get searchParams() {\n        let tempUrl = urlParse(this.href, true);\n        return tempUrl.query;\n    }\n}\n"]}