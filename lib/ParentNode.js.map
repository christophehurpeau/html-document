{"version":3,"sources":["../src/ParentNode.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;qBAAiB,QAAQ;;;;qBACP,SAAS;;;;oCACA,yBAAyB;;mCACzB,wBAAwB;;;;;;;;;;IAO9B,UAAU;cAAV,UAAU;;AAChB,aADM,UAAU,GACb;8BADG,UAAU;;AAEvB,mCAFa,UAAU,6CAEf;AACR,YAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,YAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;KAC/B;;;;;;;;;;;;iBALgB,UAAU;;;;;;;;;;;eAqBA,qCAAC,QAAQ,EAAE;AAClC,gBAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AAC7B,wBAAQ,CAAC,IAAI,CAAC,CAAC;AACf,oBAAI,IAAI,YAAY,UAAU,EAAE;AAC5B,wBAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;iBAC9C;aACJ,CAAC,CAAC;SACN;;;;;;;;;;;;eAMuB,kCAAC,QAAQ,EAAE;AAC/B,gBAAI,MAAM,YAAA,CAAC;AACX,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,IAAI,EAAI;AAC1B,oBAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;AAChB,0BAAM,GAAG,IAAI,CAAC;AACd,2BAAO,IAAI,CAAC;iBACf;;AAED,oBAAI,IAAI,YAAY,UAAU,EAAE;AAC5B,0BAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;AACjD,wBAAI,MAAM,KAAK,SAAS,EAAE;AACtB,+BAAO,IAAI,CAAC;qBACf;iBACJ;aACJ,CAAC,CAAC;AACH,mBAAO,MAAM,CAAC;SACjB;;;;;;;;;;;;eAMqB,gCAAC,QAAQ,EAAE;AAC7B,gBAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,gBAAI,CAAC,2BAA2B,CAAC,UAAA,IAAI,EAAI;AACrC,oBAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;AAChB,0BAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACrB;aACJ,CAAC,CAAC;;AAEH,mBAAO,MAAM,CAAC;SACjB;;;;;;;;;;;;eAMa,wBAAC,QAAQ,EAAE;AACrB,gBAAI,MAAM,GAAG,IAAI,CAAC;AAClB,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,IAAI,EAAI;AAC1B,oBAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;AAChB,0BAAM,GAAG,IAAI,CAAC;AACd,2BAAO,IAAI,CAAC;iBACf;aACJ,CAAC,CAAC;AACH,mBAAO,MAAM,CAAC;SACjB;;;;;;;;;;;;;eAOgB,2BAAC,QAAQ,EAAE;AACxB,gBAAM,UAAU,GAAG,qCAAmB,IAAI,EAAE,QAAQ,CAAC,CAAC;AACtD,gBAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACxC,mBAAO,UAAU,CAAC;SACrB;;;;;;;;;;;;;eAQiB,8BAAG;AACjB,gBAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAA,UAAU;uBAAI,UAAU,CAAC,OAAO,EAAE;aAAA,CAAC,CAAC;AACnE,gBAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;AAC1B,oBAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC;aACxC;SACJ;;;;;;;;;;;;;;;;;;;eAca,0BAAG;AACb,gBAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;;AAE5B,gBAAI,CAAC,IAAI,EAAE;AACP,uBAAO,IAAI,CAAC;aACf;;AAED,mBAAO,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;AAC7B,oBAAI,GAAG,IAAI,CAAC,WAAW,CAAC;aAC3B;;AAED,mBAAO,IAAI,CAAC;SACf;;;;;;;;;;;;;eAOa,wBAAC,QAAQ,EAAE;AACrB,gBAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;;AAE5B,mBAAO,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,EAAE;AAC/C,oBAAI,GAAG,IAAI,CAAC,WAAW,CAAC;aAC3B;;AAED,mBAAO,IAAI,CAAC;SACf;;;;;;;;;;;;eAOY,yBAAG;AACZ,mBAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;SAC1D;;;;;;;;;;;;;;;;;;;;eAgDU,qBAAC,KAAK,EAAE;AACf,gBAAI,EAAE,KAAK,8BAAgB,AAAC,EAAE;AAC1B,sBAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACrD;;AAED,gBAAI,KAAK,CAAC,WAAW,EAAE;AACnB,qBAAK,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACxC;;AAED,gBAAI,KAAK,CAAC,QAAQ,KAAK,kBAAK,sBAAsB,EAAE;AAChD,oBAAI,SAAS,YAAA,CAAC;;AAEd,uBAAO,SAAS,GAAG,KAAK,CAAC,UAAU,EAAE;AACjC,yBAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAC7B,wBAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;iBAC/B;;AAED,uBAAO,KAAK,CAAC;aAChB;;AAED,iBAAK,CAAC,WAAW,GAAG,IAAI,CAAC;AACzB,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,gBAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,mBAAO,KAAK,CAAC;SAChB;;;;;;;;;;;;;;eAOW,sBAAC,QAAQ,EAAE,QAAQ,EAAE;AAC7B,gBAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjD,gBAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AACd,sBAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACzC;;AAED,gBAAI,QAAQ,CAAC,WAAW,EAAE;AACtB,wBAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC9C;;AAED,gBAAI,QAAQ,CAAC,QAAQ,KAAK,kBAAK,sBAAsB,EAAE;;;AACnD,oBAAM,WAAW,GAAG,EAAE,CAAC;AACvB,oBAAI,SAAS,YAAA,CAAC;;AAEd,uBAAO,SAAS,GAAG,QAAQ,CAAC,UAAU,EAAE;AACpC,4BAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAChC,6BAAS,CAAC,WAAW,GAAG,IAAI,CAAC;AAC7B,+BAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC/B;;AAED,+BAAA,IAAI,CAAC,WAAW,EAAC,MAAM,MAAA,eAAC,KAAK,EAAE,CAAC,SAAK,WAAW,EAAC,CAAC;aACrD,MAAM;AACH,wBAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;AAC5B,oBAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;aACtC;;AAED,mBAAO,QAAQ,CAAC,WAAW,CAAC;AAC5B,gBAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,mBAAO,QAAQ,CAAC;SACnB;;;;;;;;;;;;eAMU,qBAAC,aAAa,EAAE;AACvB,gBAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AACtD,gBAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AACd,sBAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACzC;;AAED,gBAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAClC,mBAAO,aAAa,CAAC,WAAW,CAAC;AACjC,gBAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,mBAAO,aAAa,CAAC;SACxB;;;;;;;;;;;;;;eAOW,sBAAC,KAAK,EAAE,aAAa,EAAE;AAC/B,gBAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AACtD,gBAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AACd,sBAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACzC;;AAED,gBAAI,KAAK,CAAC,WAAW,EAAE;AACnB,qBAAK,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACxC;;AAED,gBAAI,KAAK,CAAC,QAAQ,KAAK,kBAAK,sBAAsB,EAAE;;;AAChD,oBAAM,QAAQ,GAAG,EAAE,CAAC;AACpB,oBAAI,SAAS,YAAA,CAAC;;AAEd,uBAAO,SAAS,GAAG,KAAK,CAAC,UAAU,EAAE;AACjC,yBAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAC7B,6BAAS,CAAC,WAAW,GAAG,IAAI,CAAC;AAC7B,4BAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC5B;;AAED,gCAAA,IAAI,CAAC,WAAW,EAAC,MAAM,MAAA,gBAAC,KAAK,EAAE,CAAC,SAAK,QAAQ,EAAC,CAAC;aAClD,MAAM;AACH,qBAAK,CAAC,WAAW,GAAG,IAAI,CAAC;AACzB,oBAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;aAC5C;;AAED,gBAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,mBAAO,KAAK,CAAC;SAChB;;;;;;;;;;;;;;;;;;;;;;eAkCQ,qBAAe;gBAAd,IAAI,yDAAG,KAAK;;AAClB,mBAAO,wCAAa,IAAI,EAAE,IAAI,CAAC,CAAC;SACnC;;;;;;;;;;;aAjVa,eAAG;AACb,mBAAO,IAAI,CAAC,WAAW,CAAC;SAC3B;;;aAgGa,eAAG;AACb,mBAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC;SACnC;;;aAgDa,eAAG;AACb,mBAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;SACtC;;;;;;;;;;;aAMY,eAAG;AACZ,mBAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;SAChE;;;;;;;;;;;aAMkB,eAAG;AAClB,gBAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAChE,gBAAI,aAAa,KAAK,CAAC,CAAC,EAAE;AACtB,sBAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;aACvE;;AAED,mBAAO,aAAa,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;SACxF;;;;;;;;;;;aAMc,eAAG;AACd,gBAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAChE,gBAAI,aAAa,KAAK,CAAC,CAAC,EAAE;AACtB,sBAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;aACvE;;AAED,mBAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;SACjE;;;aA2HY,eAAG;AACZ,mBAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,IAAI;uBAAK,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE;aAAA,EAAE,EAAE,CAAC,CAAC;SAC/E;;;;;;;;;aAMY,aAAC,IAAI,EAAE;AAChB,gBAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,gBAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,oCAAM,IAAI,EAAE,IAAI,CAAC,CAAC;SACrB;;;;;;;;;;;aAMc,eAAG;AACd,mBAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,IAAI;uBAAK,KAAK,GAAG,IAAI,CAAC,WAAW;aAAA,EAAE,EAAE,CAAC,CAAC;SACjF;aAgBc,aAAC,KAAK,EAAE;AACnB,gBAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/D;;;WAvWgB,UAAU;;;qBAAV,UAAU","file":"ParentNode.js","sourcesContent":["import Node from './Node';\nimport parse from './parse';\nimport {cloneAnyNode} from './utils/cloneNodeHelper';\nimport HTMLCollection from './utils/HTMLCollection';\n\n/**\n * The ParentNode interface contains methods that are particular to Node objects that can have children.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/ParentNode\n */\nexport default class ParentNode extends Node {\n    constructor() {\n        super();\n        this._childNodes = [];\n        this._childCollections = [];\n    }\n\n    /**\n     * TODO return {HTMLCollection}\n     *\n     * @type {Node[]}\n     * @readonly\n     */\n    get childNodes() {\n        return this._childNodes;\n    }\n\n    /**\n     * @param callback\n     * @private\n     */\n    _childNodesRecursiveForEach(callback) {\n        this._childNodes.forEach(node => {\n            callback(node);\n            if (node instanceof ParentNode) {\n                node._childNodesRecursiveForEach(callback);\n            }\n        });\n    }\n\n    /**\n     * @param callback\n     * @private\n     */\n    _childNodesRecursiveFind(callback) {\n        let result;\n        this._childNodes.some(node => {\n            if (callback(node)) {\n                result = node;\n                return true;\n            }\n\n            if (node instanceof ParentNode) {\n                result = node._childNodesRecursiveFind(callback);\n                if (result !== undefined) {\n                    return true;\n                }\n            }\n        });\n        return result;\n    }\n\n    /**\n     * @param callback\n     * @private\n     */\n    _filterDescendantNodes(callback) {\n        let result = [];\n\n        this._childNodesRecursiveForEach(node => {\n            if (callback(node)) {\n                result.push(node);\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * @param callback\n     * @private\n     */\n    _childNodeFind(callback) {\n        let result = null;\n        this._childNodes.some(node => {\n            if (callback(node)) {\n                result = node;\n                return true;\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Inner method to create new live HTMLCollection.\n     *\n     * @protected\n     */\n    _createCollection(selector) {\n        const collection = new HTMLCollection(this, selector);\n        this._childCollections.push(collection);\n        return collection;\n    }\n\n    /**\n     * Inner method to update all collections in this element and\n     * it's parent.\n     *\n     * @private\n     */\n    _updateCollections() {\n        this._childCollections.forEach(collection => collection._update());\n        if (this.parentNode !== null) {\n            this.parentNode._updateCollections();\n        }\n    }\n\n    /**\n     * @type {Node|null}\n     * @readonly\n     */\n    get parentNode() {\n        return this._parentNode || null;\n    }\n\n    /**\n     * @return {Node|null}\n     * @private\n     */\n    _highestParent() {\n        let node = this._parentNode;\n\n        if (!node) {\n            return node;\n        }\n\n        while (node._parentNode != null) {\n            node = node._parentNode;\n        }\n\n        return node;\n    }\n\n    /**\n     * @param {string} nodeName\n     * @return {Node|null}\n     * @private\n     */\n    _closestParent(nodeName) {\n        let node = this._parentNode;\n\n        while (node != null && node.nodeName !== nodeName) {\n            node = node._parentNode;\n        }\n\n        return node;\n    }\n\n    /**\n     * Method returns true if node has child nodes.\n     *\n     * @returns {boolean}\n     */\n    hasChildNodes() {\n        return this._childNodes && this._childNodes.length > 0;\n    }\n\n    /**\n     * @type {Node|null}\n     * @readonly\n     */\n    get firstChild() {\n        return this._childNodes[0] || null;\n    }\n\n    /**\n     * @type {Node|null}\n     * @readonly\n     */\n    get lastChild() {\n        return this._childNodes[this._childNodes.length - 1] || null;\n    }\n\n    /**\n     * @type {Node|null}\n     * @readonly\n     */\n    get previousSibling() {\n        const indexInParent = this.parentNode._childNodes.indexOf(this);\n        if (indexInParent === -1) {\n            throw new Error('Unexpected state: this node is not in the parent');\n        }\n\n        return indexInParent !== 0 && this.parentNode._childNodes[indexInParent - 1] || null;\n    }\n\n    /**\n     * @type {Node|null}\n     * @readonly\n     */\n    get nextSibling() {\n        const indexInParent = this.parentNode._childNodes.indexOf(this);\n        if (indexInParent === -1) {\n            throw new Error('Unexpected state: this node is not in the parent');\n        }\n\n        return this.parentNode._childNodes[indexInParent + 1] || null;\n    }\n\n    /**\n     * @param {Node} child\n     * @return {Node}\n     */\n    appendChild(child) {\n        if (!(child instanceof Node)) {\n            throw new Error('Trying to add non node element');\n        }\n\n        if (child._parentNode) {\n            child._parentNode.removeChild(child);\n        }\n\n        if (child.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            let childNode;\n\n            while (childNode = child.firstChild) {\n                child.removeChild(childNode);\n                this.appendChild(childNode);\n            }\n\n            return child;\n        }\n\n        child._parentNode = this;\n        this._childNodes.push(child);\n        this._updateCollections();\n        return child;\n    }\n\n    /**\n     * @param {Node} newChild\n     * @param {Node} oldChild\n     * @return {Node}\n     */\n    replaceChild(newChild, oldChild) {\n        const index = this._childNodes.indexOf(oldChild);\n        if (index === -1) {\n            throw new Error('Node was not found');\n        }\n\n        if (newChild._parentNode) {\n            newChild._parentNode.removeChild(newChild);\n        }\n\n        if (newChild.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            const newChildren = [];\n            let childNode;\n\n            while (childNode = newChild.firstChild) {\n                newChild.removeChild(childNode);\n                childNode._parentNode = this;\n                newChildren.push(childNode);\n            }\n\n            this._childNodes.splice(index, 1, ...newChildren);\n        } else {\n            newChild._parentNode = this;\n            this._childNodes[index] = newChild;\n        }\n\n        delete oldChild._parentNode;\n        this._updateCollections();\n        return oldChild;\n    }\n\n    /**\n     * @param {Node} toRemoveChild\n     * @return {Node}\n     */\n    removeChild(toRemoveChild) {\n        const index = this._childNodes.indexOf(toRemoveChild);\n        if (index === -1) {\n            throw new Error('Node was not found');\n        }\n\n        this._childNodes.splice(index, 1);\n        delete toRemoveChild._parentNode;\n        this._updateCollections();\n        return toRemoveChild;\n    }\n\n    /**\n     * @param {Node} child\n     * @param {Node} existingChild\n     * @return {Node}\n     */\n    insertBefore(child, existingChild) {\n        const index = this._childNodes.indexOf(existingChild);\n        if (index === -1) {\n            throw new Error('Node was not found');\n        }\n\n        if (child._parentNode) {\n            child._parentNode.removeChild(child);\n        }\n\n        if (child.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            const children = [];\n            let childNode;\n\n            while (childNode = child.firstChild) {\n                child.removeChild(childNode);\n                childNode._parentNode = this;\n                children.push(childNode);\n            }\n\n            this._childNodes.splice(index, 0, ...children);\n        } else {\n            child._parentNode = this;\n            this._childNodes.splice(index, 0, child);\n        }\n\n        this._updateCollections();\n        return child;\n    }\n\n    /**\n     * @ignore\n     * @return {string}\n     */\n    get innerHTML() {\n        return this._childNodes.reduce((value, node) => value + node._toHTML(), '');\n    }\n\n    /**\n     * @ignore\n     * @param {string} html\n     */\n    set innerHTML(html) {\n        this._childNodes = [];\n        this._updateCollections();\n        parse(html, this);\n    }\n\n    /**\n     * @ignore\n     * @return {string}\n     */\n    get textContent() {\n        return this._childNodes.reduce((value, node) => value + node.textContent, '');\n    }\n\n    /**\n     * Clone a Node, and optionally, all of its contents. By default, it clones the content of the node.\n     *\n     * @param {boolean} deep\n     * @returns {Node}\n     */\n    cloneNode(deep = false) {\n        return cloneAnyNode(this, deep);\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set textContent(value) {\n        this._childNodes = [];\n        this.appendChild(this._ownerDocument.createTextNode(value));\n    }\n}\n"]}