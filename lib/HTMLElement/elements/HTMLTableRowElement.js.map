{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLTableRowElement.js"],"names":[],"mappings":"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","file":"HTMLTableRowElement.js","sourcesContent":["import HTMLElement from '../../HTMLElement';\n\nexport default class HTMLTableRowElement extends HTMLElement {\n    constructor() {\n        super();\n    }\n\n    /**\n     * Returns a live HTMLCollection containing the cells in the row. The HTMLCollection is live and is automatically\n     * updated when rows are added or removed.\n     *\n     * @todo Update array to HTMLCollection when it's implemented\n     * @type {Element[]} HTMLTableRowElement#cells\n     */\n    get cells() {\n        return this.children.filter(element => element.tagName === 'td');\n    }\n\n    /**\n     * Is a DOMString containing one single character. This character is the one to align all the cell of a column on.\n     * It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ','\n     * for French. This property was optional and was not very well supported.\n     *\n     * @type {string}\n     * @deprecated\n     */\n    get ch() {\n        return '.';\n    }\n\n    /**\n     * Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right\n     * scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This\n     * property was optional and was not very well supported.\n     *\n     * @type {number}\n     * @deprecated\n     */\n    get chOff() {\n        return 0;\n    }\n\n    /**\n     * Set align of element\n     *\n     * @param {string} value\n     * @deprecated\n     */\n    set vAlign(value) {\n        if (['top', 'middle', 'bottom', 'baseline'].indexOf(value) !== -1) {\n            this.setAttribute('valign', value);\n        }\n    }\n\n    /**\n     * Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically\n     * aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\",\n     * or \"baseline\".\n     *\n     * @type {string}\n     * @deprecated\n     */\n    get vAlign() {\n        return this.getAttribute('valign');\n    }\n\n    /**\n     * Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the\n     * element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and\n     * \"center\".\n     *\n     * @type {string}\n     * @deprecated\n     */\n    get align() {\n        return this.getAttribute('align');\n    }\n\n    /**\n     * Set align of element\n     *\n     * @param {string} value\n     */\n    set align(value) {\n        if (['left', 'right', 'center'].indexOf(value) !== 1) {\n            this.setAttribute('align', value);\n        }\n    }\n\n    /**\n     * Returns a long value which gives the logical position of the row within the table section it belongs to.\n     * If the row is not part of a section, returns -1.\n     *\n     * @return {number}\n     */\n    get sectionRowIndex() {\n        if (this.parentNode === null) {\n            return -1;\n        }\n\n        return this.parentNode.rows.indexOf(this);\n    }\n\n    /**\n     * Returns a long value which gives the logical position of the row within the entire table. If the row is not part\n     * of a table, returns -1.\n     *\n     * @type {number}\n     */\n    get rowIndex() {\n        if (this.parentNode === null) {\n            return -1;\n        }\n\n        if (this.parentNode.parentNode === null) {\n            return -1;\n        }\n\n        let inSection = this.sectionRowIndex;\n        let section = this.parentNode;\n        let table = this.parentNode.parentNode;\n        let index = 0;\n        if (section.nodeName === 'thead') {\n            return inSection;\n        }\n\n        if (table.tHead !== null) {\n            index += table.tHead.rows.length;\n        }\n\n        const tBodies = table.tBodies;\n        if (tBodies.length !== 0) {\n            let found = false;\n            table.tBodies.every((tbody) => {\n                if (tbody === section) {\n                    found = true;\n                    return false;\n                }\n\n                index += tbody.rows.length;\n            });\n            if (found) {\n                return index + inSection;\n            }\n        }\n\n        if (section.nodeName === 'tfoot') {\n            return index + inSection;\n        }\n\n        return -1;\n    }\n\n    /**\n     * Method creates new &lt;td&gt; element and adds it to row.\n     *\n     * @param {number} index\n     * @return {HTMLElement}\n     */\n    insertCell(index = -1) {\n        let row = this.ownerDocument.createElement('td');\n        if (index === -1 || index === this.children.length) {\n            this.appendChild(row);\n        } else if (index < this.children.length - 1) {\n            this.insertBefore(row, this.children[index]);\n        } else {\n            throw new DOMException('IndexSizeError');\n        }\n\n        return row;\n    }\n\n    /**\n     * Removes the cell at the given position in the section. If the given position is greater (or equal as it starts\n     * at zero) than the amount of rows in the section, or is smaller than 0, it raises a DOMException with the\n     * IndexSizeError value.\n     *\n     * @param {number} index\n     */\n    deleteCell(index) {\n        if (index >= this.children.length || index < 0) {\n            throw new DOMException('IndexSizeError');\n        }\n\n        this.removeChild(this.children[index]);\n    }\n}\n\n/**\n * @constant {string} HTMLTableElement#nodeName table\n */\nObject.defineProperty(HTMLTableRowElement.prototype, 'nodeName', { value: 'tr' });\n"]}