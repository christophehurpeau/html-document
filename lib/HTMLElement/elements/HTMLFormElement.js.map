{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLFormElement.js"],"names":[],"mappings":"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","file":"HTMLFormElement.js","sourcesContent":["import HTMLElement from '../../HTMLElement';\nimport Event from '../../Event';\n\n/**\n * The HTMLFormElement interface provides methods to create and modify <form> elements;\n * it inherits from properties and methods of the HTMLElement interface.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n */\nexport default class HTMLFormElement extends HTMLElement {\n    /**\n     * Gets or sets value of acceptCharset. Is a DOMString that reflects the accept-charset HTML attribute,\n     * containing a list of character encodings that the server accepts.\n     *\n     * @type {string}\n     */\n\n    get acceptCharset() {\n        if (this.hasAttribute('accept-charset')) {\n            return this.getAttribute('accept-charset');\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set acceptCharset(value) {\n        this.setAttribute('accept-charset', value);\n    }\n\n    /**\n     * Gets or sets value of action. Is a DOMString that reflects the action HTML attribute, containing the\n     * URI of a program that processes the information submitted by the form.\n     *\n     * @type {string}\n     */\n    get action() {\n        if (this.hasAttribute('action')) {\n            return this.getAttribute('action');\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set action(value) {\n        this.setAttribute('action', value);\n    }\n\n    /**\n     * Gets or sets value of action. Is a DOMString that reflects the autocomplete HTML attribute, containing a\n     * string that indicates whether the controls in this form can have their values automatically\n     * populated by the browser.\n     *\n     * @type {string}\n     */\n    get autocomplete() {\n        if (this.hasAttribute('autocomplete')) {\n            return this.getAttribute('autocomplete');\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set autocomplete(value) {\n        this.setAttribute('autocomplete', value);\n    }\n\n    /**\n     * Returns a live HTMLFormControlsCollection containing all the form controls belonging to this form element.\n     *\n     * @type HTMLElement[]\n     * @readonly\n     */\n    get elements() {\n        const inputElements = ['input', 'select', 'button'];\n        return this.children.filter(element => inputElements.indexOf(element.tagName) !== -1);\n    }\n\n    set elements(value) {\n        throw new Error('elements is read only');\n    }\n\n    /**\n     * Is a synonym for enctype.\n     *\n     * @type {string}\n     */\n    get encoding() {\n        return this.enctype;\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set encoding(value) {\n        this.enctype = value;\n    }\n\n    /**\n     * Is a DOMString reflects the enctype HTML attribute, indicating the type of content that is used to transmit\n     * the form to the server. Only specified values can be set.\n     *\n     * @type {string}\n     */\n    get enctype() {\n        if (this.hasAttribute('enctype')) {\n            return this.getAttribute('enctype');\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set enctype(value) {\n        this.setAttribute('enctype', value);\n    }\n\n    /**\n     * Returns a long that represents the number of controls in the form.\n     *\n     * @type {number}\n     * @readonly\n     */\n    get length() {\n        return this.elements.length;\n    }\n\n    set length(value) {\n        throw new Error('length is read only');\n    }\n\n    /**\n     * Is a DOMString that reflects the method HTML attribute, indicating the HTTP method used to submit the form.\n     * Only specified values can be set.\n     *\n     * @type {string}\n     */\n    get method() {\n        if (this.hasAttribute('method')) {\n            return this.getAttribute('method');\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set method(value) {\n        value = value.toLowerCase();\n        if (value === 'post' || value === 'get') {\n            this.setAttribute('method', value);\n        }\n    }\n\n    /**\n     * Is a DOMString that reflects the name HTML attribute, containing the name of the form.\n     *\n     * @type {string}\n     */\n    get name() {\n        if (this.hasAttribute('name')) {\n            return this.getAttribute('name');\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set name(value) {\n        this.setAttribute('name', value);\n    }\n\n    /**\n     * Is a Boolean that reflects the novalidate HTML attribute, indicating that the form should not be validated.\n     *\n     * @type {boolean}\n     */\n    get noValidate() {\n        return this.hasAttribute('novalidate');\n    }\n\n    /**\n     * @ignore\n     * @param {boolean} value\n     */\n    set noValidate(value) {\n        if (value) {\n            this.setAttribute('novalidate', true);\n        } else {\n            this.removeAttribute('novalidate');\n        }\n    }\n\n    /**\n     * Is a DOMString that reflects the target HTML attribute, indicating where to display the results\n     * received from submitting the form.\n     *\n     * @type {string}\n     */\n    get target() {\n        if (this.hasAttribute('target')) {\n            return this.getAttribute('target');\n        }\n\n        return '';\n    }\n\n    /**\n     * @ignore\n     * @param {string} value\n     */\n    set target(value) {\n        this.setAttribute('target', value);\n    }\n\n    /**\n     * Submits the form to the server.\n     */\n    submit() {\n        let event = new Event('submit');\n        this.dispatchEvent(event);\n    }\n\n    /**\n     * Resets the forms to its initial state.\n     */\n    reset() {\n        let event = new Event('reset');\n        this.dispatchEvent(event);\n\n        if (!event.defaultPrevented) {\n            this.elements.forEach(element => element.setAttribute('value', ''));\n        }\n    }\n}\n\n/**\n * @constant {string} HTMLMetaElement#nodeName meta\n */\nObject.defineProperty(HTMLFormElement.prototype, 'nodeName', { value: 'form' });\n"]}