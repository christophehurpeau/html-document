{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLTableSectionElement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;4BAAwB,mBAAmB;;;;4BAClB,oBAAoB;;;;;;;;;;;IAQxB,uBAAuB;cAAvB,uBAAuB;;aAAvB,uBAAuB;8BAAvB,uBAAuB;;mCAAvB,uBAAuB;;;iBAAvB,uBAAuB;;;;;;;;;;;;;eAsF/B,qBAAa;gBAAZ,KAAK,yDAAG,CAAC,CAAC;;AAChB,gBAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AACjD,gBAAI,KAAK,KAAK,CAAC,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;AAChD,oBAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACzB,MAAM,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;AACzC,oBAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;aAChD,MAAM;AACH,sBAAM,8BAAiB,gBAAgB,CAAC,CAAC;aAC5C;;AAED,mBAAO,GAAG,CAAC;SACd;;;;;;;;;;;;;;;eASQ,mBAAC,KAAK,EAAE;AACb,gBAAI,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,EAAE;AAC5C,sBAAM,8BAAiB,gBAAgB,CAAC,CAAC;aAC5C;;AAED,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;SAC1C;;;;;;;;;;;;;aAzGQ,eAAG;AACR,mBAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACrC;;;;;;;;;;aAOQ,aAAC,KAAK,EAAE;AACb,gBAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AACnD,oBAAI,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACrC;SACJ;;;;;;;;;;;;;;aASO,eAAG;AACP,mBAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO;uBAAI,OAAO,CAAC,OAAO,KAAK,IAAI;aAAA,CAAC,CAAC;SACpE;;;;;;;;;;;;;;;aAUK,eAAG;AACL,mBAAO,GAAG,CAAC;SACd;;;;;;;;;;;;;;aASQ,eAAG;AACR,mBAAO,CAAC,CAAC;SACZ;;;;;;;;;;;;;;;aAUS,eAAG;AACT,mBAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;SACtC;;;;;;;;;;;aAQS,aAAC,KAAK,EAAE;AACd,gBAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AAC/D,oBAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aACtC;SACJ;;;WA9EgB,uBAAuB;;;qBAAvB,uBAAuB","file":"HTMLTableSectionElement.js","sourcesContent":["import HTMLElement from '../../HTMLElement';\nimport DOMException from '../../DOMException';\n\n/**\n * The HTMLSectionElement interface represents table section (thead, tbody etc.)\n * and inherits all classes and methods of the HTMLElement interface.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement\n */\nexport default class HTMLTableSectionElement extends HTMLElement {\n    /**\n     * Align of element content\n     *\n     * @type {string}\n     * @deprecated\n     */\n    get align() {\n        return this.getAttribute('align');\n    }\n\n    /**\n     * Set align of element\n     *\n     * @param {string} value\n     */\n    set align(value) {\n        if (['left', 'right', 'center'].indexOf(value) !== -1) {\n            this.setAttribute('align', value);\n        }\n    }\n\n    /**\n     * Returns a live HTMLCollection containing the rows in the section. The HTMLCollection is live and is automatically\n     * updated when rows are added or removed.\n     *\n     * @todo Update array to HTMLCollection when it's implemented\n     * @type {Element[]}\n     */\n    get rows() {\n        return this.children.filter(element => element.tagName === 'tr');\n    }\n\n    /**\n     * Is a DOMString containing one single chararcter. This character is the one to align all the cell of a column on.\n     * It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ','\n     * for French. This property was optional and was not very well supported.\n     *\n     * @type {string}\n     * @deprecated\n     */\n    get ch() {\n        return '.';\n    }\n\n    /**\n     * Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right\n     * scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This\n     * property was optional and was not very well supported.\n     *\n     * @type {number}\n     */\n    get chOff() {\n        return 0;\n    }\n\n    /**\n     * Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically\n     * aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\",\n     * or \"baseline\".\n     *\n     * @type {string}\n     * @deprecated\n     */\n    get vAlign() {\n        return this.getAttribute('valign');\n    }\n\n    /**\n     * Set align of element\n     *\n     * @param {string} value\n     * @ignore\n     */\n    set vAlign(value) {\n        if (['top', 'middle', 'bottom', 'baseline'].indexOf(value) !== -1) {\n            this.setAttribute('valign', value);\n        }\n    }\n\n    /**\n     * Method creates new &lt;tr&gt; element and adds it to section.\n     *\n     * @param {number} index\n     * @return {HTMLElement}\n     */\n    insertRow(index = -1) {\n        let row = this.ownerDocument.createElement('tr');\n        if (index === -1 || index === this.children.length) {\n            this.appendChild(row);\n        } else if (index < this.children.length - 1) {\n            this.insertBefore(row, this.children[index]);\n        } else {\n            throw new DOMException('IndexSizeError');\n        }\n\n        return row;\n    }\n\n    /**\n     * Removes the row at the given position in the section. If the given position is greater (or equal as it starts\n     * at zero) than the amount of rows in the section, or is smaller than 0, it raises a DOMException with the\n     * IndexSizeError value.\n     *\n     * @param {number} index\n     */\n    deleteRow(index) {\n        if (index >= this.children.length || index < 0) {\n            throw new DOMException('IndexSizeError');\n        }\n\n        this.removeChild(this.children[index]);\n    }\n}\n"]}