{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLLinkElement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;4BAAwB,mBAAmB;;;;;IAEtB,eAAe;cAAf,eAAe;;aAAf,eAAe;8BAAf,eAAe;;mCAAf,eAAe;;;;;;;iBAAf,eAAe;;;;;;;;;;;aAOrB,eAAG;AACV,mBAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SAC3E;;;;;;;;aAKU,aAAC,KAAK,EAAE;AACf,gBAAI,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;SACvC;;;;;;;;;;;;aAQW,eAAG;AACX,mBAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,OAAO,GAAG,KAAK,CAAC;SAC5F;;;;;;;;aAKW,aAAC,KAAK,EAAE;AAChB,gBAAI,CAAC,KAAK,EAAE;AACR,oBAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;aACpC,MAAM;AACH,oBAAI,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;aAC7C;SACJ;;;;;;;;;;;;aAQO,eAAG;AACP,mBAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;SACrE;;;;;;;;;aAMO,aAAC,KAAK,EAAE;AACZ,gBAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACpC;;;;;;;;;;;;aAQW,eAAG;AACX,mBAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;SAC7E;;;;;;;;aAKW,aAAC,KAAK,EAAE;AAChB,gBAAI,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACxC;;;;;;;;;;;;aAQM,eAAG;AACN,mBAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SACnE;;;;;;;;aAKM,aAAC,KAAK,EAAE;AACX,gBAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SACnC;;;WAzFgB,eAAe;;;qBAAf,eAAe;AA+FpC,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,SAAS,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC","file":"HTMLLinkElement.js","sourcesContent":["import HTMLElement from '../../HTMLElement';\n\nexport default class HTMLLinkElement extends HTMLElement {\n    /**\n     * Gets or sets the character encoding for the target resource.\n     *\n     * @member {string} HTMLLinkElement#charset\n     * @returns {string}\n     */\n    get charset() {\n        return this.hasAttribute('charset') ? this.getAttribute('charset') : '';\n    }\n\n    /**\n     * @param {string} value\n     */\n    set charset(value) {\n        this.setAttribute('charset', value);\n    }\n\n    /**\n     * Gets or sets whether the link is disabled; currently only used with style sheet links.\n     *\n     * @member {boolean} HTMLLinkElement#disabled\n     * @returns {boolean}\n     */\n    get disabled() {\n        return this.hasAttribute('disabled') ? this.getAttribute('disabled') !== 'false' : false;\n    }\n\n    /**\n     * @param {boolean} value\n     */\n    set disabled(value) {\n        if (!value) {\n            this.removeAttribute('disabled');\n        } else {\n            this.setAttribute('disabled', 'disabled');\n        }\n    }\n\n    /**\n     * Gets or sets the URI for the target resource.\n     *\n     * @member {string} HTMLLinkElement#href\n     * @returns {string}\n     */\n    get href() {\n        return this.hasAttribute('href') ? this.getAttribute('href') : '';\n    }\n\n    /**\n     * @param {string} value\n     * @todo Provide URL extension to full version\n     */\n    set href(value) {\n        this.setAttribute('href', value);\n    }\n\n    /**\n     * Gets or sets the language code for the linked resource.\n     *\n     * @member {string} HTMLLinkElement#hreflang\n     * @returns {string}\n     */\n    get hreflang() {\n        return this.hasAttribute('hreflang') ? this.getAttribute('hreflang') : '';\n    }\n\n    /**\n     * @param {string} value\n     */\n    set hreflang(value) {\n        this.setAttribute('hreflang', value);\n    }\n\n    /**\n     * Gets or sets the forward relationship of the linked resource from the document to the resource.\n     *\n     * @member {string} HTMLLinkElement#rel\n     * @returns {string}\n     */\n    get rel() {\n        return this.hasAttribute('rel') ? this.getAttribute('rel') : '';\n    }\n\n    /**\n     * @param {string} value\n     */\n    set rel(value) {\n        this.setAttribute('rel', value);\n    }\n}\n\n/**\n * @constant {string} HTMLLinkElement#nodeName option\n */\nObject.defineProperty(HTMLLinkElement.prototype, 'nodeName', { value: 'link' });\n\n"]}