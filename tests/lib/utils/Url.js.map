{"version":3,"sources":["../../src/utils/Url.js"],"names":[],"mappings":";;;;;wBAC8C,UAAU;;2BACxC,wBAAwB;;;;AAExC,IAAI,CAAC,4BAA4B,EAAE,YAAM;AACrC,QAAI,GAAG,GAAG,8BAAS,CAAC;AACpB,yBAAM,GAAG,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,CAAC;;AAErC,OAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AAClC,yBAAM,GAAG,CAAC,QAAQ,EAAE,EAAE,mBAAmB,CAAC,CAAC;CAC9C,CAAC,CAAC;;AAEH,IAAI,CAAC,cAAc,EAAE,YAAM;AACvB,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,yBAAM,GAAG,EAAE,mBAAmB,CAAC,CAAC;CACnC,CAAC,CAAC;;AAEH,IAAI,CAAC,aAAa,EAAE,YAAM;AACtB,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;;AAE3C,OAAG,CAAC,IAAI,GAAG,4BAA4B,CAAC;AACxC,+BAAY,GAAG,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;;AAErD,OAAG,CAAC,IAAI,GAAG,EAAE,CAAC;AACd,+BAAY,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;CACxC,CAAC,CAAC;;AAEH,IAAI,CAAC,iBAAiB,EAAE,YAAM;AAC1B,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;;AAEnC,OAAG,CAAC,QAAQ,GAAG,OAAO,CAAC;AACvB,+BAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;;AAEnC,OAAG,CAAC,QAAQ,GAAG,KAAK,CAAC;AACrB,+BAAY,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;CACrC,CAAC,CAAC;;AAEH,IAAI,CAAC,aAAa,EAAE,YAAM;AACtB,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;;AAEnC,OAAG,CAAC,IAAI,GAAG,4BAA4B,CAAC;AACxC,+BAAY,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;;AAEpC,OAAG,CAAC,IAAI,GAAG,aAAa,CAAC;AACzB,+BAAY,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;;AAErC,OAAG,CAAC,IAAI,GAAG,WAAW,CAAC;AACvB,OAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAChB,+BAAY,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;CACzC,CAAC,CAAC;;AAEH,IAAI,CAAC,aAAa,EAAE,YAAM;AACtB,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;AAE1B,OAAG,CAAC,IAAI,GAAG,SAAS,CAAC;AACrB,+BAAY,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;;AAEjC,OAAG,CAAC,IAAI,GAAG,4BAA4B,CAAC;AACxC,+BAAY,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;;AAEpC,OAAG,CAAC,IAAI,GAAG,0BAA0B,CAAC;AACtC,+BAAY,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;CACrC,CAAC,CAAC;;AAEH,IAAI,CAAC,iBAAiB,EAAE,YAAM;AAC1B,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;;AAEvC,OAAG,CAAC,IAAI,GAAG,4BAA4B,CAAC;AACxC,+BAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;;AAEnC,OAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACxB,+BAAY,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;;AAEpC,OAAG,CAAC,IAAI,GAAG,WAAW,CAAC;AACvB,OAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAChB,+BAAY,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;CAC1C,CAAC,CAAC;;AAEH,IAAI,CAAC,aAAa,EAAE,YAAM;AACtB,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;AAE5B,OAAG,CAAC,IAAI,GAAG,uBAAuB,CAAC;AACnC,+BAAY,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;AAE5B,OAAG,CAAC,IAAI,GAAG,aAAa,CAAC;AACzB,+BAAY,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;;AAE9B,OAAG,CAAC,IAAI,GAAG,WAAW,CAAC;AACvB,OAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAChB,+BAAY,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;;AAEvD,OAAG,CAAC,IAAI,GAAG,kBAAkB,CAAC;AAC9B,+BAAY,GAAG,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;;AAEpD,OAAG,GAAG,6BAAQ,qBAAqB,CAAC,CAAC;AACrC,+BAAY,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;;AAE7B,OAAG,GAAG,6BAAQ,oBAAoB,CAAC,CAAC;AACpC,+BAAY,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;CAC7B,CAAC,CAAC;;AAEH,IAAI,CAAC,iBAAiB,EAAE,YAAM;AAC1B,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;;AAE/B,OAAG,CAAC,QAAQ,GAAG,yBAAyB,CAAC;AACzC,+BAAY,GAAG,CAAC,QAAQ,EAAE,yBAAyB,CAAC,CAAC;AACrD,+BAAY,GAAG,CAAC,IAAI,EAAE,yCAAyC,CAAC,CAAC;CACpE,CAAC,CAAC;;AAEH,IAAI,CAAC,eAAe,EAAE,YAAM;AACxB,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;;AAE5B,OAAG,CAAC,IAAI,GAAG,mDAAmD,CAAC;AAC/D,+BAAY,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;;AAEtC,OAAG,CAAC,MAAM,GAAG,qBAAqB,CAAC;AACnC,+BAAY,GAAG,CAAC,IAAI,EAAE,6DAA6D,CAAC,CAAC;CACxF,CAAC,CAAC;;AAEH,IAAI,CAAC,aAAa,EAAE,YAAM;AACtB,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;AAE3B,OAAG,CAAC,IAAI,GAAG,OAAO,CAAC;AACnB,+BAAY,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;AAE/B,OAAG,CAAC,IAAI,GAAG,WAAW,CAAC;AACvB,+BAAY,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AACpC,+BAAY,GAAG,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;CACxD,CAAC,CAAC;;AAEH,IAAI,CAAC,iBAAiB,EAAE,YAAM;AAC1B,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;;AAE9B,OAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AACtB,+BAAY,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;;AAE9B,OAAG,CAAC,IAAI,GAAG,SAAS,CAAC;AACrB,+BAAY,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;AAEhC,OAAG,CAAC,IAAI,GAAG,4BAA4B,CAAC;AACxC,+BAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;;AAEnC,OAAG,CAAC,IAAI,GAAG,0BAA0B,CAAC;AACtC,+BAAY,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;;AAEtC,OAAG,CAAC,IAAI,GAAG,2BAA2B,CAAC;AACvC,+BAAY,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;;AAE9B,OAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;AACpB,+BAAY,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;CACxC,CAAC,CAAC;;AAEH,IAAI,CAAC,iBAAiB,EAAE,YAAM;AAC1B,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,+BAAY,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;;AAE9B,OAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AACtB,+BAAY,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;AAE/B,OAAG,CAAC,IAAI,GAAG,SAAS,CAAC;AACrB,+BAAY,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;;AAElC,OAAG,CAAC,IAAI,GAAG,4BAA4B,CAAC;AACxC,+BAAY,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;;AAElC,OAAG,CAAC,IAAI,GAAG,0BAA0B,CAAC;AACtC,+BAAY,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;;AAE9B,OAAG,CAAC,QAAQ,GAAG,UAAU,CAAC;AAC1B,+BAAY,GAAG,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;;AAE3C,OAAG,CAAC,IAAI,GAAG,2BAA2B,CAAC;AACvC,+BAAY,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;CACzC,CAAC,CAAC;;AAEH,IAAI,CAAC,qBAAqB,EAAE,YAAM;AAC9B,QAAI,GAAG,GAAG,6BAAQ,kBAAkB,CAAC,CAAC;AACtC,6BAAU,GAAG,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;;AAEhC,OAAG,CAAC,IAAI,GAAG,mDAAmD,CAAC;AAC/D,+BAAY,GAAG,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;CAC9C,CAAC,CAAC","file":"Url.js","sourcesContent":["/* global test */\nimport { equal, strictEqual, deepEqual } from 'proclaim';\nimport Url from '../../../lib/utils/Url';\n\ntest('Url constructor processing', () => {\n    let url = new Url();\n    equal(url.toString(), 'about:blank');\n\n    url = new Url('http://some.link');\n    equal(url.toString(), 'http://some.link/');\n});\n\ntest('Url toString', () => {\n    let url = new Url('http://some.link');\n    equal(url, 'http://some.link/');\n});\n\ntest('href member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.href, 'http://some.link/');\n\n    url.href = 'ftp://test:test@other:8080';\n    strictEqual(url.href, 'ftp://test:test@other:8080/');\n\n    url.href = '';\n    strictEqual(url.href, 'about:blank');\n});\n\ntest('protocol member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.protocol, 'http:');\n\n    url.protocol = 'some:';\n    strictEqual(url.protocol, 'some:');\n\n    url.protocol = 'ftp';\n    strictEqual(url.protocol, 'ftp:');\n});\n\ntest('host member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.host, 'some.link');\n\n    url.href = 'ftp://test:test@other:8080';\n    strictEqual(url.host, 'other:8080');\n\n    url.host = 'my.url:8080';\n    strictEqual(url.host, 'my.url:8080');\n\n    url.host = 'other.url';\n    url.port = '90';\n    strictEqual(url.host, 'other.url:90');\n});\n\ntest('auth member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.auth, '');\n\n    url.auth = 'my:name';\n    strictEqual(url.auth, 'my:name');\n\n    url.href = 'http://other:name@link.com';\n    strictEqual(url.auth, 'other:name');\n\n    url.href = 'http://username@link.com';\n    strictEqual(url.auth, 'username');\n});\n\ntest('hostname member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.hostname, 'some.link');\n\n    url.href = 'ftp://test:test@other:8080';\n    strictEqual(url.hostname, 'other');\n\n    url.hostname = 'my.url';\n    strictEqual(url.hostname, 'my.url');\n\n    url.host = 'other.url';\n    url.port = '90';\n    strictEqual(url.hostname, 'other.url');\n});\n\ntest('port member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.port, '80');\n\n    url.href = 'ftp://test:test@other';\n    strictEqual(url.port, '21');\n\n    url.host = 'my.url:8080';\n    strictEqual(url.port, '8080');\n\n    url.host = 'other.url';\n    url.port = '90';\n    strictEqual(url.host, 'other.url:90');\n    strictEqual(url.href, 'ftp://test:test@other.url:90/');\n\n    url.port = 'some other value';\n    strictEqual(url.href, 'ftp://test:test@other.url/');\n\n    url = new Url('https://secure.link');\n    strictEqual(url.port, '443');\n\n    url = new Url('mongo://mongo.link');\n    strictEqual(url.port, '');\n});\n\ntest('pathname member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.pathname, '/');\n\n    url.pathname = '/some/path/on/site.html';\n    strictEqual(url.pathname, '/some/path/on/site.html');\n    strictEqual(url.href, 'http://some.link/some/path/on/site.html');\n});\n\ntest('search member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.search, '');\n\n    url.href = 'http://some.link/some/path/on/site.html?search=me';\n    strictEqual(url.search, '?search=me');\n\n    url.search = 'myparams for search';\n    strictEqual(url.href, 'http://some.link/some/path/on/site.html?myparams for search');\n});\n\ntest('hash member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.hash, '#');\n\n    url.hash = '#hash';\n    strictEqual(url.hash, '#hash');\n\n    url.hash = 'some_hash';\n    strictEqual(url.hash, '#some_hash');\n    strictEqual(url.href, 'http://some.link/#some_hash');\n});\n\ntest('username member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.username, '');\n\n    url.username = 'user';\n    strictEqual(url.auth, 'user');\n\n    url.auth = 'my:name';\n    strictEqual(url.username, 'my');\n\n    url.href = 'http://other:name@link.com';\n    strictEqual(url.username, 'other');\n\n    url.href = 'http://username@link.com';\n    strictEqual(url.username, 'username');\n\n    url.href = 'http://:username@link.com';\n    strictEqual(url.username, '');\n\n    url.username = 'me';\n    strictEqual(url.auth, 'me:username');\n});\n\ntest('password member', () => {\n    let url = new Url('http://some.link');\n    strictEqual(url.password, '');\n\n    url.password = 'pass';\n    strictEqual(url.auth, ':pass');\n\n    url.auth = 'my:name';\n    strictEqual(url.password, 'name');\n\n    url.href = 'http://other:name@link.com';\n    strictEqual(url.password, 'name');\n\n    url.href = 'http://username@link.com';\n    strictEqual(url.password, '');\n\n    url.password = 'password';\n    strictEqual(url.auth, 'username:password');\n\n    url.href = 'http://:username@link.com';\n    strictEqual(url.password, 'username');\n});\n\ntest('searchParams member', () => {\n    let url = new Url('http://some.link');\n    deepEqual(url.searchParams, {});\n\n    url.href = 'http://some.link/some/path/on/site.html?search=me';\n    strictEqual(url.searchParams.search, 'me');\n});\n"]}