{"version":3,"sources":["../src/MouseEvent.js"],"names":[],"mappings":";;;;;wBACmB,UAAU;;;;AAE7B,IAAM,GAAG,GAAG,YAAY,CAAC;;AAEzB,IAAM,UAAU,GAAG,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC,CAAC;;AAE/C,IAAI,CAAC,qBAAqB,EAAE,YAAM;AAC9B,QAAI,KAAK,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;AACpC,0BAAO,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACpC,0BAAO,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CACxC,CAAC,CAAC;;AAEH,IAAI,CAAC,4BAA4B,EAAE,YAAM;AACrC,QAAI,KAAK,GAAG,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;AACpE,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AACjC,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;CACpC,CAAC,CAAC;;AAEH,IAAI,CAAC,mCAAmC,EAAE,YAAM;AAC5C,QAAI,KAAK,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;AACpC,0BAAO,MAAM,CAAC,YAAM;AAChB,aAAK,CAAC,OAAO,GAAG,GAAG,CAAC;KACvB,CAAC,CAAC;CACN,CAAC,CAAC;;AAEH,IAAI,CAAC,0CAA0C,EAAE,YAAM;AACnD,QAAI,KAAK,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;AACpC,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/B,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/B,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/B,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/B,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACnC,0BAAO,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AACpC,0BAAO,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAClC,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACnC,0BAAO,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC9B,0BAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/B,0BAAO,KAAK,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AACxC,0BAAO,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;CACpC,CAAC,CAAC","file":"MouseEvent.js","sourcesContent":["/* global test */\nimport assert from 'proclaim';\n\nconst lib = '../../lib/';\n\nconst MouseEvent = require(lib + 'MouseEvent');\n\ntest('Default constructor', () => {\n    let event = new MouseEvent('click');\n    assert.strictEqual(event.detail, 0);\n    assert.deepEqual(event.view, global);\n});\n\ntest('Constructor extends fields', () => {\n    let event = new MouseEvent('click', { screenX: 100, screenY: 100 });\n    assert.equal(event.screenX, 100);\n    assert.equal(event.screenY, 100);\n});\n\ntest('Should throw on try to set fields', () => {\n    let event = new MouseEvent('click');\n    assert.throws(() => {\n        event.screenX = 100;\n    });\n});\n\ntest('Constructor should initialize all fields', () => {\n    let event = new MouseEvent('click');\n    assert.equal(event.screenX, 0);\n    assert.equal(event.screenY, 0);\n    assert.equal(event.clientX, 0);\n    assert.equal(event.clientY, 0);\n    assert.equal(event.ctrlKey, false);\n    assert.equal(event.shiftKey, false);\n    assert.equal(event.altKey, false);\n    assert.equal(event.metaKey, false);\n    assert.equal(event.button, 0);\n    assert.equal(event.buttons, 0);\n    assert.equal(event.relatedTarget, null);\n    assert.equal(event.region, null);\n});\n"]}