{"version":3,"sources":["../src/Attr.js"],"names":[],"mappings":";;;;;wBACmB,UAAU;;;;AAC7B,IAAM,MAAM,GAAG,sBAAO,WAAW,CAAC;AAClC,IAAM,MAAM,GAAG,sBAAO,MAAM,CAAC;;AAE7B,IAAM,GAAG,GAAG,YAAY,CAAC;;AAEzB,IAAM,IAAI,GAAG,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC;;AAEnC,IAAI,CAAC,gCAAgC,EAAE,YAAM;AACzC,QAAI,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAClC,UAAM,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CAC1B,CAAC,CAAC;;AAEH,IAAI,CAAC,6CAA6C,EAAE,YAAM;AACtD,UAAM,CAAC,YAAM;AACT,YAAI,IAAI,EAAE,CAAC;KACd,CAAC,CAAC;CACN,CAAC,CAAC;;AAEH,IAAI,CAAC,kBAAkB,EAAE,YAAM;AAC3B,QAAI,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAClC,UAAM,kBAAC,YAAY;AACf,SAAC,CAAC,IAAI,GAAG,OAAO,CAAC;KACpB,CAAC,CAAC;CACN,CAAC,CAAC;;AAEH,IAAI,CAAC,kBAAkB,EAAE,YAAM;AAC3B,QAAI,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAClC,UAAM,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;;AAEtB,QAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AACvB,UAAM,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;CACxB,CAAC,CAAC;;AAEH,IAAI,CAAC,uBAAuB,EAAE,YAAM;AAChC,QAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AACvB,UAAM,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;CAC7B,CAAC,CAAC;;AAEH,IAAI,CAAC,kBAAkB,EAAE,YAAM;AAC3B,QAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,UAAM,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACzB,KAAC,CAAC,KAAK,GAAG,EAAE,CAAC;AACb,UAAM,CAAC,CAAC,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;CACtC,CAAC,CAAC","file":"Attr.js","sourcesContent":["/* global test */\nimport assert from 'proclaim';\nconst expect = assert.strictEqual;\nconst throws = assert.throws;\n\nconst lib = '../../lib/';\n\nconst Attr = require(lib + 'Attr');\n\ntest('Constructor and name attribute', () => {\n    let a = new Attr('some', 'value');\n    expect(a.name, 'some');\n});\n\ntest('Constructor should throw if name is not set', () => {\n    throws(() => {\n        new Attr();\n    });\n});\n\ntest('name is readonly', () => {\n    let a = new Attr('some', 'value');\n    throws(function () {\n        a.name = 'value';\n    });\n});\n\ntest('isId checks name', () => {\n    let a = new Attr('some', 'value');\n    expect(a.isId, false);\n\n    let b = new Attr('id');\n    expect(b.isId, true);\n});\n\ntest('specified always true', () => {\n    let b = new Attr('id');\n    expect(b.specified, true);\n});\n\ntest('value can be set', () => {\n    let a = new Attr('a', 'value');\n    expect(a.value, 'value');\n    a.value = {};\n    expect(a.value, '[object Object]');\n});\n"]}