{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLAnchorElement.js"],"names":[],"mappings":"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","file":"HTMLAnchorElement.js","sourcesContent":["import assert from 'proclaim';\nconst expect = assert.strictEqual;\n\nconst lib = '../../../../lib/';\n\nconst HTMLAnchorElement = require(lib + 'HTMLElement/elements/HTMLAnchorElement');\nconst Document = require(lib + 'Document');\nconst DOMException = require(lib + 'DOMException');\n\ntest('HTMLAnchorElement should have the nodeName == table ', () => {\n    let elt = new HTMLAnchorElement();\n    elt._ownerDocument = new Document();\n    expect(elt.nodeName, 'a');\n});\n\ntest('HTMLAnchorElement should provide hash', () => {\n    let elt = new HTMLAnchorElement();\n    elt.href = '/someurl#hash-data';\n    expect(elt.hash, '#hash-data');\n});\n\ntest('HTMLAnchorElement should provide host', () => {\n    let elt = new HTMLAnchorElement();\n    elt.href = '/someurl#hash-data';\n    expect(elt.host, '');\n    elt.href = 'http://www.google.com:80/some-url';\n    expect(elt.host, 'www.google.com:80');\n});\n\ntest('HTMLAnchorElement should provide hostname', () => {\n    let elt = new HTMLAnchorElement();\n    elt.href = '/someurl#hash-data';\n    expect(elt.hostname, '');\n    elt.href = 'http://www.google.com:80/some-url';\n    expect(elt.hostname, 'www.google.com');\n});\n\ntest('HTMLAnchorElement clone should clone href', () => {\n    let document = new Document();\n    let elt = document.createElement('a');\n    elt.href = '/someurl#hash-data';\n    let clone = elt.cloneNode();\n    expect(clone.hash, '#hash-data');\n});\n\ntest('HTMLAnchorElement set hostname for relative pathes', () => {\n    let document = new Document();\n    document.location = 'http://some.test:80/page';\n    let elt = document.createElement('a');\n    elt.href = 'mypage.html';\n    expect(elt.pathname, 'mypage.html');\n    expect(elt.href, 'http://some.test:80/mypage.html');\n});\n\ntest('HTMLAnchorElement protocol returned with \":\"', () => {\n    let document = new Document();\n    document.location = 'http://some.test:80/page';\n    let elt = document.createElement('a');\n    elt.href = 'mypage.html';\n    expect(elt.protocol, 'http:');\n});\n\ntest('HTMLAnchorElement rel process properly', () => {\n    let document = new Document();\n    document.body.innerHTML = '<a href=\"\" rel=\"nofollow\">Text</a>';\n    let elt = document.body.querySelector('a[rel=\"nofollow\"]');\n    expect(elt.getAttribute('rel'), 'nofollow');\n});\n"]}