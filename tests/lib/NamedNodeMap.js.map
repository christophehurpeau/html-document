{"version":3,"sources":["../src/NamedNodeMap.js"],"names":[],"mappings":"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","file":"NamedNodeMap.js","sourcesContent":["/* global test */\nimport assert from 'proclaim';\nconst expect = assert.strictEqual;\nconst throws = assert.throws;\n\nconst lib = '../../lib/';\n\nconst NamedNodeMap = require(lib + 'NamedNodeMap');\nconst Document = require(lib + 'Document');\n\ntest('Length is 0 on create', () => {\n    let n = new NamedNodeMap();\n    expect(n.length, 0);\n});\n\ntest('setNamedItem should add attr to map', () => {\n    let n = new NamedNodeMap();\n    let document = new Document();\n    let attr = document.createAttribute('some');\n    n.setNamedItem(attr);\n    expect(n.length, 1);\n});\n\ntest('setNamedItem should throw if not attr argument', () => {\n    let n = new NamedNodeMap();\n    throws(() => {\n        n.setNamedItem('some');\n    });\n});\n\ntest('setNamedItem should replace attr with same name', () => {\n    let n = new NamedNodeMap();\n    let document = new Document();\n    let attr = document.createAttribute('some');\n    attr.value = 'world';\n    n.setNamedItem(attr);\n    let attr2 = document.createAttribute('some');\n    attr2.value = 'hello';\n    let attr3 = n.setNamedItem(attr2);\n    expect(attr3.value, 'world');\n    expect(n.length, 1);\n    expect(n.getNamedItem('some').value, 'hello');\n});\n\ntest('getNamedItem should return null if no element found', () => {\n    let n = new NamedNodeMap();\n    expect(n.getNamedItem('some'), null);\n});\n\ntest('getNamedItem should return Attr item if found', () => {\n    let n = new NamedNodeMap();\n    let document = new Document();\n    let attr = document.createAttribute('some');\n    n.setNamedItem(attr);\n    let attr2 = n.getNamedItem('some');\n    expect(attr2.name, 'some');\n});\n\ntest('removeNamedItem should return null if no item', () => {\n    let n = new NamedNodeMap();\n    expect(n.removeNamedItem('some'), null);\n});\n\ntest('removeNamedItem should return item', () => {\n    let n = new NamedNodeMap();\n    let document = new Document();\n    let attr = document.createAttribute('some');\n    n.setNamedItem(attr);\n    let attr2 = n.removeNamedItem('some');\n    expect(attr2.name, 'some');\n    expect(n.length, 0);\n});\n\ntest('item should return particular attribute in position', () => {\n    let n = new NamedNodeMap();\n    let document = new Document();\n    let attr = document.createAttribute('some');\n    n.setNamedItem(attr);\n    expect(n.item(0).name, 'some');\n});\n\ntest('item should return null on wrong index', () => {\n    let n = new NamedNodeMap();\n    expect(n.item(-1), null);\n    expect(n.item(1), null);\n});\n\ntest('NamedNodeMap should be iterable', () => {\n    let n = new NamedNodeMap();\n    let document = new Document();\n    let a = document.createAttribute('some');\n    let b = document.createAttribute('other');\n    n.setNamedItem(a);\n    n.setNamedItem(b);\n    for (let attr of n) {\n        expect(attr.specified, true);\n    }\n});\n"]}