{"version":3,"sources":["../src/Element.js"],"names":[],"mappings":"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","file":"Element.js","sourcesContent":["/* global test */\nimport assert from 'proclaim';\n\nconst lib = '../../lib/';\n\nconst Document = require(lib + 'Document');\nconst Event = require(lib + 'Event');\n\ntest('Element querySelector', () => {\n    const document = new Document();\n    const div = document.createElement('div');\n    const span = document.createElement('span');\n    const span2 = document.createElement('span');\n    span.className = 'css class';\n    span2.setAttribute('title', 'title');\n    div.appendChild(span);\n    document.body.appendChild(div);\n    document.body.appendChild(span2);\n    assert.equal(span.className, 'css class');\n    assert.deepEqual(span, document.body.querySelector('.css'));\n    assert.deepEqual(span, document.body.querySelector('span.css'));\n    assert.equal(null, document.body.querySelector('div.css'));\n    assert.deepEqual(span, document.body.querySelector('div span.css'));\n    assert.deepEqual(span2, document.body.querySelector('span[title=title]'));\n});\n\ntest('Element querySelector on several selectors', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span class=\"second\">Text</span></div><i>Skip me</i><input type=\"text\"/>';\n    let element = document.body.querySelector('.first, input');\n    assert.equal(element.getAttribute('type'), 'text');\n});\n\ntest('Element querySelectorAll', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span class=\"first\">Text</span></div><i>Skip me</i><input type=\"text\"/>';\n    let elements = document.body.querySelectorAll('.first, input');\n    assert.equal(elements.length, 2);\n    assert.equal(elements[0].textContent, 'Text');\n    assert.equal(elements[1].getAttribute('type'), 'text');\n});\n\ntest('Element querySelectorAll for several elements', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div>1</div><div>2</div><div>3</div><span></span><div>4</div>';\n    let elements = document.body.querySelectorAll('div');\n    assert.equal(elements.length, 4);\n    assert.equal(elements[0].textContent, '1');\n    assert.equal(elements[1].textContent, '2');\n    assert.equal(elements[2].textContent, '3');\n    assert.equal(elements[3].textContent, '4');\n});\n\ntest('Element querySelectorAll deep several', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div>1<div>2<div>3<span></span><div>4</div></div></div></div>';\n    let elements = document.body.querySelectorAll('div');\n    assert.equal(elements.length, 4);\n    assert.equal(elements[0].textContent, '1234');\n    assert.equal(elements[1].textContent, '234');\n    assert.equal(elements[2].textContent, '34');\n    assert.equal(elements[3].textContent, '4');\n});\n\ntest('Element querySelectorAll returns nothing if not found', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div>1<div>2<div>3<span></span><div>4</div></div></div></div>';\n    let elements = document.body.querySelectorAll('i');\n    assert.equal(elements.length, 0);\n});\n\ntest('Elemeent querySelector with ID', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div>1<div>2<div>3<span></span><div>4</div></div></div></div>';\n    let elements = document.body.querySelectorAll('#element');\n    assert.equal(elements.length, 0);\n});\n"]}