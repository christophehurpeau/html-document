{"version":3,"sources":["../src/Element.js"],"names":[],"mappings":"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","file":"Element.js","sourcesContent":["/* global test */\nimport assert from 'proclaim';\n\nconst lib = '../../lib/';\n\nconst Document = require(lib + 'Document');\n\ntest('Element querySelector', () => {\n    const document = new Document();\n    const div = document.createElement('div');\n    const span = document.createElement('span');\n    div.appendChild(span);\n\n    assert.strictEqual(div.querySelector('span'), span);\n});\n\ntest('Element querySelectorAll', () => {\n    const document = new Document();\n    const div = document.createElement('div');\n    const span = document.createElement('span');\n    div.appendChild(span);\n\n    assert.deepEqual(div.querySelectorAll('span'), [span]);\n});\n\ntest('Element getElementsByTagName should search elements everywhere', () => {\n    const document = new Document();\n    document.documentElement.innerHTML = '<html><head><meta name=\"keywords\"/></head><body><meta name=\"other\"/>' +\n        '<div><meta name=\"other\"/></div></body>';\n    let metas = document.getElementsByTagName('meta');\n    assert.equal(metas.length, 3);\n});\n\ntest('Element firstElementChild', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span></span>This is text<b></b> and more text<a></a></div>';\n    let div = document.body.firstChild;\n    assert.equal(div.firstElementChild.tagName, 'span');\n});\n\ntest('Element lastElementChild', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span></span>This is text<b></b> and more text<a></a></div>';\n    let div = document.body.firstChild;\n    assert.equal(div.lastElementChild.tagName, 'a');\n});\n\ntest('Element nextElementSibling', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span></span>This is text<b></b> and more text<a></a></div>';\n    let span = document.body.firstChild.firstElementChild;\n    assert.equal(span.nextElementSibling.tagName, 'b');\n});\n\ntest('Element nextElementSibling on last element', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span></span>This is text<b></b> and more text<a></a></div>';\n    let a = document.body.firstChild.lastElementChild;\n    assert.isNull(a.nextElementSibling);\n});\n\ntest('Element previousElementSibling', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span></span>This is text<b></b> and more text<a></a></div>';\n    let a = document.body.firstChild.lastElementChild;\n    assert.equal(a.previousElementSibling.tagName, 'b');\n});\n\ntest('Element previousElementSibling on first element', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span></span>This is text<b></b> and more text<a></a></div>';\n    let span = document.body.firstChild.firstElementChild;\n    assert.isNull(span.previousElementSibling);\n});\n\ntest('Element previousElementSibling on only child', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span></span></div>';\n    let span = document.body.firstChild.firstElementChild;\n    assert.isNull(span.previousElementSibling);\n});\n\ntest('Element nextElementSibling on only child', () => {\n    const document = new Document();\n    document.body.innerHTML = '<div><span></span></div>';\n    let span = document.body.firstChild.firstElementChild;\n    assert.isNull(span.nextElementSibling);\n});\n\ntest('getElementsByTagName returns everything if tag name not set', () => {\n    const document = new Document();\n    document.body.innerHTML = '<b></b><div><b></b></div>';\n    let collection = document.getElementsByTagName();\n    assert.equal(collection.length, 4);\n});\n\ntest('getElementsByClassName returns HTMLCollection', () => {\n    const document = new Document();\n    document.body.innerHTML = '<b class=\"some class\"></b><div><b class=\"some\"></b></div>';\n    let somes = document.getElementsByClassName('some');\n    assert.equal(somes.length, 2);\n    let someClasses = document.getElementsByClassName('class some');\n    assert.equal(someClasses.length, 1);\n});\n\ntest('getElementsByClassName returns live HTMLCollection', () => {\n    const document = new Document();\n    let somes = document.getElementsByClassName('some');\n    document.body.innerHTML = '<b class=\"some class\"></b><div><b class=\"some\"></b></div>';\n    assert.equal(somes.length, 2);\n});\n"]}