{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLMetaElement.js"],"names":["suite","test","elt","_ownerDocument","nodeName","document","meta","createElement","content","getAttribute","setAttribute","httpEquiv","name","head","innerHTML","firstChild"],"mappings":";;AAAA;;AACA;;AAEAA,MAAM,iBAAN,EAAyB,MAAM;AAC7BC,OAAK,mDAAL,EAA0D,MAAM;AAC9D,QAAIC,MAAM,uBAAV;AACAA,QAAIC,cAAJ,GAAqB,gBAArB;AACA,+BAAYD,IAAIE,QAAhB,EAA0B,MAA1B;AACD,GAJD;;AAMAH,OAAK,6CAAL,EAAoD,MAAM;AACxD,UAAMI,WAAW,gBAAjB;AACA,QAAIC,OAAOD,SAASE,aAAT,CAAuB,MAAvB,CAAX;AACA,sBAAGD,iCAAH;AACD,GAJD;;AAMAL,OAAK,4BAAL,EAAmC,MAAM;AACvC,QAAIC,MAAM,uBAAV;AACAA,QAAIC,cAAJ,GAAqB,gBAArB;AACAD,QAAIM,OAAJ,GAAc,SAAd;AACA,+BAAYN,IAAIO,YAAJ,CAAiB,SAAjB,CAAZ,EAAyC,SAAzC;AACAP,QAAIQ,YAAJ,CAAiB,SAAjB,EAA4B,OAA5B;AACA,+BAAYR,IAAIM,OAAhB,EAAyB,OAAzB;AACD,GAPD;;AASAP,OAAK,8BAAL,EAAqC,MAAM;AACzC,QAAIC,MAAM,uBAAV;AACAA,QAAIC,cAAJ,GAAqB,gBAArB;AACAD,QAAIS,SAAJ,GAAgB,SAAhB;AACA,+BAAYT,IAAIO,YAAJ,CAAiB,YAAjB,CAAZ,EAA4C,SAA5C;AACAP,QAAIQ,YAAJ,CAAiB,YAAjB,EAA+B,OAA/B;AACA,+BAAYR,IAAIS,SAAhB,EAA2B,OAA3B;AACD,GAPD;;AASAV,OAAK,yBAAL,EAAgC,MAAM;AACpC,QAAIC,MAAM,uBAAV;AACAA,QAAIC,cAAJ,GAAqB,gBAArB;AACAD,QAAIU,IAAJ,GAAW,SAAX;AACA,+BAAYV,IAAIO,YAAJ,CAAiB,MAAjB,CAAZ,EAAsC,SAAtC;AACAP,QAAIQ,YAAJ,CAAiB,MAAjB,EAAyB,OAAzB;AACA,+BAAYR,IAAIU,IAAhB,EAAsB,OAAtB;AACD,GAPD;;AASAX,OAAK,iCAAL,EAAwC,MAAM;AAC5C,UAAMI,WAAW,gBAAjB;AACAA,aAASQ,IAAT,CAAcC,SAAd,GAA0B,+CAA1B;AACA,QAAIR,OAAOD,SAASQ,IAAT,CAAcE,UAAzB;AACA,+BAAYT,KAAKM,IAAjB,EAAuB,UAAvB;AACA,+BAAYN,KAAKE,OAAjB,EAA0B,cAA1B;AACD,GAND;;AAQAP,OAAK,kDAAL,EAAyD,MAAM;AAC7D,QAAIC,MAAM,uBAAV;AACAA,QAAIC,cAAJ,GAAqB,gBAArB;AACA,+BAAYD,IAAIM,OAAhB,EAAyB,EAAzB;AACA,+BAAYN,IAAIU,IAAhB,EAAsB,EAAtB;AACA,+BAAYV,IAAIS,SAAhB,EAA2B,EAA3B;AACD,GAND;AAOD,CAvDD","file":"HTMLMetaElement.js","sourcesContent":["import { strictEqual, ok } from 'proclaim';\nimport { Document, HTMLMetaElement } from '../../../../src';\n\nsuite('HTMLMetaElement', () => {\n  test('HTMLMetaElement should have the nodeName == meta ', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    strictEqual(elt.nodeName, 'meta');\n  });\n\n  test('document.createElement should create object', () => {\n    const document = new Document();\n    let meta = document.createElement('meta');\n    ok(meta instanceof HTMLMetaElement);\n  });\n\n  test('Should set and get content', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    elt.content = 'Content';\n    strictEqual(elt.getAttribute('content'), 'Content');\n    elt.setAttribute('content', 'Other');\n    strictEqual(elt.content, 'Other');\n  });\n\n  test('Should set and get httpEquiv', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    elt.httpEquiv = 'Content';\n    strictEqual(elt.getAttribute('http-equiv'), 'Content');\n    elt.setAttribute('http-equiv', 'Other');\n    strictEqual(elt.httpEquiv, 'Other');\n  });\n\n  test('Should set and get name', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    elt.name = 'Content';\n    strictEqual(elt.getAttribute('name'), 'Content');\n    elt.setAttribute('name', 'Other');\n    strictEqual(elt.name, 'Other');\n  });\n\n  test('Should fill attributes from tag', () => {\n    const document = new Document();\n    document.head.innerHTML = '<meta name=\"keywords\" content=\"some content\">';\n    let meta = document.head.firstChild;\n    strictEqual(meta.name, 'keywords');\n    strictEqual(meta.content, 'some content');\n  });\n\n  test('Should return empty values if attributes not set', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    strictEqual(elt.content, '');\n    strictEqual(elt.name, '');\n    strictEqual(elt.httpEquiv, '');\n  });\n});\n"]}